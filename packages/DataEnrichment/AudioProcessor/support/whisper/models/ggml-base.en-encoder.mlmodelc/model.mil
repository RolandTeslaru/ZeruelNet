program(1.0)
[buildInfo = dict<tensor<string, []>, tensor<string, []>>({{"coremlc-component-MIL", "3405.2.1"}, {"coremlc-version", "3404.23.1"}, {"coremltools-component-torch", "2.7.1"}, {"coremltools-source-dialect", "TorchScript"}, {"coremltools-version", "8.3.0"}})]
{
    func main<ios15>(tensor<fp32, [1, 80, 3000]> logmel_data) {
            tensor<string, []> var_32_pad_type_0 = const()[name = tensor<string, []>("op_32_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> var_32_pad_0 = const()[name = tensor<string, []>("op_32_pad_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [1]> var_32_strides_0 = const()[name = tensor<string, []>("op_32_strides_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, [1]> var_32_dilations_0 = const()[name = tensor<string, []>("op_32_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> var_32_groups_0 = const()[name = tensor<string, []>("op_32_groups_0"), val = tensor<int32, []>(1)];
            tensor<string, []> logmel_data_to_fp16_dtype_0 = const()[name = tensor<string, []>("logmel_data_to_fp16_dtype_0"), val = tensor<string, []>("fp16")];
            tensor<fp16, [512, 80, 3]> const_0_to_fp16 = const()[name = tensor<string, []>("const_0_to_fp16"), val = tensor<fp16, [512, 80, 3]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(64)))];
            tensor<fp16, [512]> const_1_to_fp16 = const()[name = tensor<string, []>("const_1_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(245888)))];
            tensor<fp16, [1, 80, 3000]> logmel_data_to_fp16 = cast(dtype = logmel_data_to_fp16_dtype_0, x = logmel_data)[name = tensor<string, []>("cast_28")];
            tensor<fp16, [1, 512, 3000]> var_32_cast_fp16 = conv(bias = const_1_to_fp16, dilations = var_32_dilations_0, groups = var_32_groups_0, pad = var_32_pad_0, pad_type = var_32_pad_type_0, strides = var_32_strides_0, weight = const_0_to_fp16, x = logmel_data_to_fp16)[name = tensor<string, []>("op_32_cast_fp16")];
            tensor<string, []> input_1_mode_0 = const()[name = tensor<string, []>("input_1_mode_0"), val = tensor<string, []>("EXACT")];
            tensor<fp16, [1, 512, 3000]> input_1_cast_fp16 = gelu(mode = input_1_mode_0, x = var_32_cast_fp16)[name = tensor<string, []>("input_1_cast_fp16")];
            tensor<string, []> var_50_pad_type_0 = const()[name = tensor<string, []>("op_50_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> var_50_pad_0 = const()[name = tensor<string, []>("op_50_pad_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [1]> var_50_strides_0 = const()[name = tensor<string, []>("op_50_strides_0"), val = tensor<int32, [1]>([2])];
            tensor<int32, [1]> var_50_dilations_0 = const()[name = tensor<string, []>("op_50_dilations_0"), val = tensor<int32, [1]>([1])];
            tensor<int32, []> var_50_groups_0 = const()[name = tensor<string, []>("op_50_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [512, 512, 3]> const_2_to_fp16 = const()[name = tensor<string, []>("const_2_to_fp16"), val = tensor<fp16, [512, 512, 3]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(246976)))];
            tensor<fp16, [512]> const_3_to_fp16 = const()[name = tensor<string, []>("const_3_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1819904)))];
            tensor<fp16, [1, 512, 1500]> var_50_cast_fp16 = conv(bias = const_3_to_fp16, dilations = var_50_dilations_0, groups = var_50_groups_0, pad = var_50_pad_0, pad_type = var_50_pad_type_0, strides = var_50_strides_0, weight = const_2_to_fp16, x = input_1_cast_fp16)[name = tensor<string, []>("op_50_cast_fp16")];
            tensor<string, []> x_3_mode_0 = const()[name = tensor<string, []>("x_3_mode_0"), val = tensor<string, []>("EXACT")];
            tensor<fp16, [1, 512, 1500]> x_3_cast_fp16 = gelu(mode = x_3_mode_0, x = var_50_cast_fp16)[name = tensor<string, []>("x_3_cast_fp16")];
            tensor<fp16, [512, 1500]> var_55_to_fp16 = const()[name = tensor<string, []>("op_55_to_fp16"), val = tensor<fp16, [512, 1500]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1820992)))];
            tensor<fp16, [1, 512, 1500]> var_57_cast_fp16 = add(x = x_3_cast_fp16, y = var_55_to_fp16)[name = tensor<string, []>("op_57_cast_fp16")];
            tensor<int32, [1]> inputs_1_axes_0 = const()[name = tensor<string, []>("inputs_1_axes_0"), val = tensor<int32, [1]>([2])];
            tensor<fp16, [1, 512, 1, 1500]> inputs_1_cast_fp16 = expand_dims(axes = inputs_1_axes_0, x = var_57_cast_fp16)[name = tensor<string, []>("inputs_1_cast_fp16")];
            tensor<int32, []> var_72 = const()[name = tensor<string, []>("op_72"), val = tensor<int32, []>(1)];
            tensor<int32, [1]> input_3_axes_0 = const()[name = tensor<string, []>("input_3_axes_0"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [512]> input_3_gamma_0_to_fp16 = const()[name = tensor<string, []>("input_3_gamma_0_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(3357056)))];
            tensor<fp16, [512]> input_3_beta_0_to_fp16 = const()[name = tensor<string, []>("input_3_beta_0_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(3358144)))];
            tensor<fp16, []> var_88_to_fp16 = const()[name = tensor<string, []>("op_88_to_fp16"), val = tensor<fp16, []>(0x1.5p-17)];
            tensor<fp16, [1, 512, 1, 1500]> input_3_cast_fp16 = layer_norm(axes = input_3_axes_0, beta = input_3_beta_0_to_fp16, epsilon = var_88_to_fp16, gamma = input_3_gamma_0_to_fp16, x = inputs_1_cast_fp16)[name = tensor<string, []>("input_3_cast_fp16")];
            tensor<string, []> q_1_pad_type_0 = const()[name = tensor<string, []>("q_1_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> q_1_strides_0 = const()[name = tensor<string, []>("q_1_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> q_1_pad_0 = const()[name = tensor<string, []>("q_1_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> q_1_dilations_0 = const()[name = tensor<string, []>("q_1_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> q_1_groups_0 = const()[name = tensor<string, []>("q_1_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [512, 512, 1, 1]> var_123_weight_0_to_fp16 = const()[name = tensor<string, []>("op_123_weight_0_to_fp16"), val = tensor<fp16, [512, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(3359232)))];
            tensor<fp16, [512]> var_123_bias_0_to_fp16 = const()[name = tensor<string, []>("op_123_bias_0_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(3883584)))];
            tensor<fp16, [1, 512, 1, 1500]> var_123_cast_fp16 = conv(bias = var_123_bias_0_to_fp16, dilations = q_1_dilations_0, groups = q_1_groups_0, pad = q_1_pad_0, pad_type = q_1_pad_type_0, strides = q_1_strides_0, weight = var_123_weight_0_to_fp16, x = input_3_cast_fp16)[name = tensor<string, []>("op_123_cast_fp16")];
            tensor<string, []> k_1_pad_type_0 = const()[name = tensor<string, []>("k_1_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> k_1_strides_0 = const()[name = tensor<string, []>("k_1_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> k_1_pad_0 = const()[name = tensor<string, []>("k_1_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> k_1_dilations_0 = const()[name = tensor<string, []>("k_1_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> k_1_groups_0 = const()[name = tensor<string, []>("k_1_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [512, 512, 1, 1]> blocks_0_attn_key_weight_to_fp16 = const()[name = tensor<string, []>("blocks_0_attn_key_weight_to_fp16"), val = tensor<fp16, [512, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(3884672)))];
            tensor<fp16, [1, 512, 1, 1500]> k_1_cast_fp16 = conv(dilations = k_1_dilations_0, groups = k_1_groups_0, pad = k_1_pad_0, pad_type = k_1_pad_type_0, strides = k_1_strides_0, weight = blocks_0_attn_key_weight_to_fp16, x = input_3_cast_fp16)[name = tensor<string, []>("k_1_cast_fp16")];
            tensor<string, []> var_121_pad_type_0 = const()[name = tensor<string, []>("op_121_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> var_121_strides_0 = const()[name = tensor<string, []>("op_121_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> var_121_pad_0 = const()[name = tensor<string, []>("op_121_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> var_121_dilations_0 = const()[name = tensor<string, []>("op_121_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> var_121_groups_0 = const()[name = tensor<string, []>("op_121_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [512, 512, 1, 1]> blocks_0_attn_value_weight_to_fp16 = const()[name = tensor<string, []>("blocks_0_attn_value_weight_to_fp16"), val = tensor<fp16, [512, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(4409024)))];
            tensor<fp16, [512]> blocks_0_attn_value_bias_to_fp16 = const()[name = tensor<string, []>("blocks_0_attn_value_bias_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(4933376)))];
            tensor<fp16, [1, 512, 1, 1500]> var_121_cast_fp16 = conv(bias = blocks_0_attn_value_bias_to_fp16, dilations = var_121_dilations_0, groups = var_121_groups_0, pad = var_121_pad_0, pad_type = var_121_pad_type_0, strides = var_121_strides_0, weight = blocks_0_attn_value_weight_to_fp16, x = input_3_cast_fp16)[name = tensor<string, []>("op_121_cast_fp16")];
            tensor<int32, [8]> tile_0 = const()[name = tensor<string, []>("tile_0"), val = tensor<int32, [8]>([64, 64, 64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_124_axis_0 = const()[name = tensor<string, []>("op_124_axis_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 64, 1, 1500]> var_124_cast_fp16_0, tensor<fp16, [1, 64, 1, 1500]> var_124_cast_fp16_1, tensor<fp16, [1, 64, 1, 1500]> var_124_cast_fp16_2, tensor<fp16, [1, 64, 1, 1500]> var_124_cast_fp16_3, tensor<fp16, [1, 64, 1, 1500]> var_124_cast_fp16_4, tensor<fp16, [1, 64, 1, 1500]> var_124_cast_fp16_5, tensor<fp16, [1, 64, 1, 1500]> var_124_cast_fp16_6, tensor<fp16, [1, 64, 1, 1500]> var_124_cast_fp16_7 = split(axis = var_124_axis_0, split_sizes = tile_0, x = var_123_cast_fp16)[name = tensor<string, []>("op_124_cast_fp16")];
            tensor<int32, [4]> var_133_perm_0 = const()[name = tensor<string, []>("op_133_perm_0"), val = tensor<int32, [4]>([0, 3, 2, 1])];
            tensor<int32, [8]> tile_1 = const()[name = tensor<string, []>("tile_1"), val = tensor<int32, [8]>([64, 64, 64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_134_axis_0 = const()[name = tensor<string, []>("op_134_axis_0"), val = tensor<int32, []>(3)];
            tensor<fp16, [1, 1500, 1, 512]> var_133_cast_fp16 = transpose(perm = var_133_perm_0, x = k_1_cast_fp16)[name = tensor<string, []>("transpose_6")];
            tensor<fp16, [1, 1500, 1, 64]> var_134_cast_fp16_0, tensor<fp16, [1, 1500, 1, 64]> var_134_cast_fp16_1, tensor<fp16, [1, 1500, 1, 64]> var_134_cast_fp16_2, tensor<fp16, [1, 1500, 1, 64]> var_134_cast_fp16_3, tensor<fp16, [1, 1500, 1, 64]> var_134_cast_fp16_4, tensor<fp16, [1, 1500, 1, 64]> var_134_cast_fp16_5, tensor<fp16, [1, 1500, 1, 64]> var_134_cast_fp16_6, tensor<fp16, [1, 1500, 1, 64]> var_134_cast_fp16_7 = split(axis = var_134_axis_0, split_sizes = tile_1, x = var_133_cast_fp16)[name = tensor<string, []>("op_134_cast_fp16")];
            tensor<int32, [8]> tile_2 = const()[name = tensor<string, []>("tile_2"), val = tensor<int32, [8]>([64, 64, 64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_143_axis_0 = const()[name = tensor<string, []>("op_143_axis_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 64, 1, 1500]> var_143_cast_fp16_0, tensor<fp16, [1, 64, 1, 1500]> var_143_cast_fp16_1, tensor<fp16, [1, 64, 1, 1500]> var_143_cast_fp16_2, tensor<fp16, [1, 64, 1, 1500]> var_143_cast_fp16_3, tensor<fp16, [1, 64, 1, 1500]> var_143_cast_fp16_4, tensor<fp16, [1, 64, 1, 1500]> var_143_cast_fp16_5, tensor<fp16, [1, 64, 1, 1500]> var_143_cast_fp16_6, tensor<fp16, [1, 64, 1, 1500]> var_143_cast_fp16_7 = split(axis = var_143_axis_0, split_sizes = tile_2, x = var_121_cast_fp16)[name = tensor<string, []>("op_143_cast_fp16")];
            tensor<string, []> aw_1_equation_0 = const()[name = tensor<string, []>("aw_1_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_1_cast_fp16 = einsum(equation = aw_1_equation_0, values = (var_134_cast_fp16_0, var_124_cast_fp16_0))[name = tensor<string, []>("aw_1_cast_fp16")];
            tensor<string, []> aw_3_equation_0 = const()[name = tensor<string, []>("aw_3_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_3_cast_fp16 = einsum(equation = aw_3_equation_0, values = (var_134_cast_fp16_1, var_124_cast_fp16_1))[name = tensor<string, []>("aw_3_cast_fp16")];
            tensor<string, []> aw_5_equation_0 = const()[name = tensor<string, []>("aw_5_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_5_cast_fp16 = einsum(equation = aw_5_equation_0, values = (var_134_cast_fp16_2, var_124_cast_fp16_2))[name = tensor<string, []>("aw_5_cast_fp16")];
            tensor<string, []> aw_7_equation_0 = const()[name = tensor<string, []>("aw_7_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_7_cast_fp16 = einsum(equation = aw_7_equation_0, values = (var_134_cast_fp16_3, var_124_cast_fp16_3))[name = tensor<string, []>("aw_7_cast_fp16")];
            tensor<string, []> aw_9_equation_0 = const()[name = tensor<string, []>("aw_9_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_9_cast_fp16 = einsum(equation = aw_9_equation_0, values = (var_134_cast_fp16_4, var_124_cast_fp16_4))[name = tensor<string, []>("aw_9_cast_fp16")];
            tensor<string, []> aw_11_equation_0 = const()[name = tensor<string, []>("aw_11_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_11_cast_fp16 = einsum(equation = aw_11_equation_0, values = (var_134_cast_fp16_5, var_124_cast_fp16_5))[name = tensor<string, []>("aw_11_cast_fp16")];
            tensor<string, []> aw_13_equation_0 = const()[name = tensor<string, []>("aw_13_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_13_cast_fp16 = einsum(equation = aw_13_equation_0, values = (var_134_cast_fp16_6, var_124_cast_fp16_6))[name = tensor<string, []>("aw_13_cast_fp16")];
            tensor<string, []> aw_15_equation_0 = const()[name = tensor<string, []>("aw_15_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_15_cast_fp16 = einsum(equation = aw_15_equation_0, values = (var_134_cast_fp16_7, var_124_cast_fp16_7))[name = tensor<string, []>("aw_15_cast_fp16")];
            tensor<fp16, [1, 1500, 1, 1500]> var_168_cast_fp16 = softmax(axis = var_72, x = aw_1_cast_fp16)[name = tensor<string, []>("op_168_cast_fp16")];
            tensor<fp16, [1, 1500, 1, 1500]> var_169_cast_fp16 = softmax(axis = var_72, x = aw_3_cast_fp16)[name = tensor<string, []>("op_169_cast_fp16")];
            tensor<fp16, [1, 1500, 1, 1500]> var_170_cast_fp16 = softmax(axis = var_72, x = aw_5_cast_fp16)[name = tensor<string, []>("op_170_cast_fp16")];
            tensor<fp16, [1, 1500, 1, 1500]> var_171_cast_fp16 = softmax(axis = var_72, x = aw_7_cast_fp16)[name = tensor<string, []>("op_171_cast_fp16")];
            tensor<fp16, [1, 1500, 1, 1500]> var_172_cast_fp16 = softmax(axis = var_72, x = aw_9_cast_fp16)[name = tensor<string, []>("op_172_cast_fp16")];
            tensor<fp16, [1, 1500, 1, 1500]> var_173_cast_fp16 = softmax(axis = var_72, x = aw_11_cast_fp16)[name = tensor<string, []>("op_173_cast_fp16")];
            tensor<fp16, [1, 1500, 1, 1500]> var_174_cast_fp16 = softmax(axis = var_72, x = aw_13_cast_fp16)[name = tensor<string, []>("op_174_cast_fp16")];
            tensor<fp16, [1, 1500, 1, 1500]> var_175_cast_fp16 = softmax(axis = var_72, x = aw_15_cast_fp16)[name = tensor<string, []>("op_175_cast_fp16")];
            tensor<string, []> var_177_equation_0 = const()[name = tensor<string, []>("op_177_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_177_cast_fp16 = einsum(equation = var_177_equation_0, values = (var_143_cast_fp16_0, var_168_cast_fp16))[name = tensor<string, []>("op_177_cast_fp16")];
            tensor<string, []> var_179_equation_0 = const()[name = tensor<string, []>("op_179_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_179_cast_fp16 = einsum(equation = var_179_equation_0, values = (var_143_cast_fp16_1, var_169_cast_fp16))[name = tensor<string, []>("op_179_cast_fp16")];
            tensor<string, []> var_181_equation_0 = const()[name = tensor<string, []>("op_181_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_181_cast_fp16 = einsum(equation = var_181_equation_0, values = (var_143_cast_fp16_2, var_170_cast_fp16))[name = tensor<string, []>("op_181_cast_fp16")];
            tensor<string, []> var_183_equation_0 = const()[name = tensor<string, []>("op_183_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_183_cast_fp16 = einsum(equation = var_183_equation_0, values = (var_143_cast_fp16_3, var_171_cast_fp16))[name = tensor<string, []>("op_183_cast_fp16")];
            tensor<string, []> var_185_equation_0 = const()[name = tensor<string, []>("op_185_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_185_cast_fp16 = einsum(equation = var_185_equation_0, values = (var_143_cast_fp16_4, var_172_cast_fp16))[name = tensor<string, []>("op_185_cast_fp16")];
            tensor<string, []> var_187_equation_0 = const()[name = tensor<string, []>("op_187_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_187_cast_fp16 = einsum(equation = var_187_equation_0, values = (var_143_cast_fp16_5, var_173_cast_fp16))[name = tensor<string, []>("op_187_cast_fp16")];
            tensor<string, []> var_189_equation_0 = const()[name = tensor<string, []>("op_189_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_189_cast_fp16 = einsum(equation = var_189_equation_0, values = (var_143_cast_fp16_6, var_174_cast_fp16))[name = tensor<string, []>("op_189_cast_fp16")];
            tensor<string, []> var_191_equation_0 = const()[name = tensor<string, []>("op_191_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_191_cast_fp16 = einsum(equation = var_191_equation_0, values = (var_143_cast_fp16_7, var_175_cast_fp16))[name = tensor<string, []>("op_191_cast_fp16")];
            tensor<bool, []> input_5_interleave_0 = const()[name = tensor<string, []>("input_5_interleave_0"), val = tensor<bool, []>(false)];
            tensor<fp16, [1, 512, 1, 1500]> input_5_cast_fp16 = concat(axis = var_72, interleave = input_5_interleave_0, values = (var_177_cast_fp16, var_179_cast_fp16, var_181_cast_fp16, var_183_cast_fp16, var_185_cast_fp16, var_187_cast_fp16, var_189_cast_fp16, var_191_cast_fp16))[name = tensor<string, []>("input_5_cast_fp16")];
            tensor<string, []> var_200_pad_type_0 = const()[name = tensor<string, []>("op_200_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> var_200_strides_0 = const()[name = tensor<string, []>("op_200_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> var_200_pad_0 = const()[name = tensor<string, []>("op_200_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> var_200_dilations_0 = const()[name = tensor<string, []>("op_200_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> var_200_groups_0 = const()[name = tensor<string, []>("op_200_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [512, 512, 1, 1]> blocks_0_attn_out_weight_to_fp16 = const()[name = tensor<string, []>("blocks_0_attn_out_weight_to_fp16"), val = tensor<fp16, [512, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(4934464)))];
            tensor<fp16, [512]> blocks_0_attn_out_bias_to_fp16 = const()[name = tensor<string, []>("blocks_0_attn_out_bias_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(5458816)))];
            tensor<fp16, [1, 512, 1, 1500]> var_200_cast_fp16 = conv(bias = blocks_0_attn_out_bias_to_fp16, dilations = var_200_dilations_0, groups = var_200_groups_0, pad = var_200_pad_0, pad_type = var_200_pad_type_0, strides = var_200_strides_0, weight = blocks_0_attn_out_weight_to_fp16, x = input_5_cast_fp16)[name = tensor<string, []>("op_200_cast_fp16")];
            tensor<fp16, [1, 512, 1, 1500]> inputs_3_cast_fp16 = add(x = inputs_1_cast_fp16, y = var_200_cast_fp16)[name = tensor<string, []>("inputs_3_cast_fp16")];
            tensor<int32, [1]> input_7_axes_0 = const()[name = tensor<string, []>("input_7_axes_0"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [512]> input_7_gamma_0_to_fp16 = const()[name = tensor<string, []>("input_7_gamma_0_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(5459904)))];
            tensor<fp16, [512]> input_7_beta_0_to_fp16 = const()[name = tensor<string, []>("input_7_beta_0_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(5460992)))];
            tensor<fp16, []> var_210_to_fp16 = const()[name = tensor<string, []>("op_210_to_fp16"), val = tensor<fp16, []>(0x1.5p-17)];
            tensor<fp16, [1, 512, 1, 1500]> input_7_cast_fp16 = layer_norm(axes = input_7_axes_0, beta = input_7_beta_0_to_fp16, epsilon = var_210_to_fp16, gamma = input_7_gamma_0_to_fp16, x = inputs_3_cast_fp16)[name = tensor<string, []>("input_7_cast_fp16")];
            tensor<string, []> input_9_pad_type_0 = const()[name = tensor<string, []>("input_9_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_9_strides_0 = const()[name = tensor<string, []>("input_9_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> input_9_pad_0 = const()[name = tensor<string, []>("input_9_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_9_dilations_0 = const()[name = tensor<string, []>("input_9_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_9_groups_0 = const()[name = tensor<string, []>("input_9_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [2048, 512, 1, 1]> blocks_0_mlp_0_weight_to_fp16 = const()[name = tensor<string, []>("blocks_0_mlp_0_weight_to_fp16"), val = tensor<fp16, [2048, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(5462080)))];
            tensor<fp16, [2048]> blocks_0_mlp_0_bias_to_fp16 = const()[name = tensor<string, []>("blocks_0_mlp_0_bias_to_fp16"), val = tensor<fp16, [2048]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(7559296)))];
            tensor<fp16, [1, 2048, 1, 1500]> input_9_cast_fp16 = conv(bias = blocks_0_mlp_0_bias_to_fp16, dilations = input_9_dilations_0, groups = input_9_groups_0, pad = input_9_pad_0, pad_type = input_9_pad_type_0, strides = input_9_strides_0, weight = blocks_0_mlp_0_weight_to_fp16, x = input_7_cast_fp16)[name = tensor<string, []>("input_9_cast_fp16")];
            tensor<string, []> input_11_mode_0 = const()[name = tensor<string, []>("input_11_mode_0"), val = tensor<string, []>("EXACT")];
            tensor<fp16, [1, 2048, 1, 1500]> input_11_cast_fp16 = gelu(mode = input_11_mode_0, x = input_9_cast_fp16)[name = tensor<string, []>("input_11_cast_fp16")];
            tensor<string, []> var_236_pad_type_0 = const()[name = tensor<string, []>("op_236_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> var_236_strides_0 = const()[name = tensor<string, []>("op_236_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> var_236_pad_0 = const()[name = tensor<string, []>("op_236_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> var_236_dilations_0 = const()[name = tensor<string, []>("op_236_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> var_236_groups_0 = const()[name = tensor<string, []>("op_236_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [512, 2048, 1, 1]> blocks_0_mlp_2_weight_to_fp16 = const()[name = tensor<string, []>("blocks_0_mlp_2_weight_to_fp16"), val = tensor<fp16, [512, 2048, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(7563456)))];
            tensor<fp16, [512]> blocks_0_mlp_2_bias_to_fp16 = const()[name = tensor<string, []>("blocks_0_mlp_2_bias_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(9660672)))];
            tensor<fp16, [1, 512, 1, 1500]> var_236_cast_fp16 = conv(bias = blocks_0_mlp_2_bias_to_fp16, dilations = var_236_dilations_0, groups = var_236_groups_0, pad = var_236_pad_0, pad_type = var_236_pad_type_0, strides = var_236_strides_0, weight = blocks_0_mlp_2_weight_to_fp16, x = input_11_cast_fp16)[name = tensor<string, []>("op_236_cast_fp16")];
            tensor<fp16, [1, 512, 1, 1500]> inputs_5_cast_fp16 = add(x = inputs_3_cast_fp16, y = var_236_cast_fp16)[name = tensor<string, []>("inputs_5_cast_fp16")];
            tensor<int32, []> var_245 = const()[name = tensor<string, []>("op_245"), val = tensor<int32, []>(1)];
            tensor<int32, [1]> input_13_axes_0 = const()[name = tensor<string, []>("input_13_axes_0"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [512]> input_13_gamma_0_to_fp16 = const()[name = tensor<string, []>("input_13_gamma_0_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(9661760)))];
            tensor<fp16, [512]> input_13_beta_0_to_fp16 = const()[name = tensor<string, []>("input_13_beta_0_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(9662848)))];
            tensor<fp16, []> var_261_to_fp16 = const()[name = tensor<string, []>("op_261_to_fp16"), val = tensor<fp16, []>(0x1.5p-17)];
            tensor<fp16, [1, 512, 1, 1500]> input_13_cast_fp16 = layer_norm(axes = input_13_axes_0, beta = input_13_beta_0_to_fp16, epsilon = var_261_to_fp16, gamma = input_13_gamma_0_to_fp16, x = inputs_5_cast_fp16)[name = tensor<string, []>("input_13_cast_fp16")];
            tensor<string, []> q_3_pad_type_0 = const()[name = tensor<string, []>("q_3_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> q_3_strides_0 = const()[name = tensor<string, []>("q_3_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> q_3_pad_0 = const()[name = tensor<string, []>("q_3_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> q_3_dilations_0 = const()[name = tensor<string, []>("q_3_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> q_3_groups_0 = const()[name = tensor<string, []>("q_3_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [512, 512, 1, 1]> var_296_weight_0_to_fp16 = const()[name = tensor<string, []>("op_296_weight_0_to_fp16"), val = tensor<fp16, [512, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(9663936)))];
            tensor<fp16, [512]> var_296_bias_0_to_fp16 = const()[name = tensor<string, []>("op_296_bias_0_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(10188288)))];
            tensor<fp16, [1, 512, 1, 1500]> var_296_cast_fp16 = conv(bias = var_296_bias_0_to_fp16, dilations = q_3_dilations_0, groups = q_3_groups_0, pad = q_3_pad_0, pad_type = q_3_pad_type_0, strides = q_3_strides_0, weight = var_296_weight_0_to_fp16, x = input_13_cast_fp16)[name = tensor<string, []>("op_296_cast_fp16")];
            tensor<string, []> k_3_pad_type_0 = const()[name = tensor<string, []>("k_3_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> k_3_strides_0 = const()[name = tensor<string, []>("k_3_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> k_3_pad_0 = const()[name = tensor<string, []>("k_3_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> k_3_dilations_0 = const()[name = tensor<string, []>("k_3_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> k_3_groups_0 = const()[name = tensor<string, []>("k_3_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [512, 512, 1, 1]> blocks_1_attn_key_weight_to_fp16 = const()[name = tensor<string, []>("blocks_1_attn_key_weight_to_fp16"), val = tensor<fp16, [512, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(10189376)))];
            tensor<fp16, [1, 512, 1, 1500]> k_3_cast_fp16 = conv(dilations = k_3_dilations_0, groups = k_3_groups_0, pad = k_3_pad_0, pad_type = k_3_pad_type_0, strides = k_3_strides_0, weight = blocks_1_attn_key_weight_to_fp16, x = input_13_cast_fp16)[name = tensor<string, []>("k_3_cast_fp16")];
            tensor<string, []> var_294_pad_type_0 = const()[name = tensor<string, []>("op_294_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> var_294_strides_0 = const()[name = tensor<string, []>("op_294_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> var_294_pad_0 = const()[name = tensor<string, []>("op_294_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> var_294_dilations_0 = const()[name = tensor<string, []>("op_294_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> var_294_groups_0 = const()[name = tensor<string, []>("op_294_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [512, 512, 1, 1]> blocks_1_attn_value_weight_to_fp16 = const()[name = tensor<string, []>("blocks_1_attn_value_weight_to_fp16"), val = tensor<fp16, [512, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(10713728)))];
            tensor<fp16, [512]> blocks_1_attn_value_bias_to_fp16 = const()[name = tensor<string, []>("blocks_1_attn_value_bias_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(11238080)))];
            tensor<fp16, [1, 512, 1, 1500]> var_294_cast_fp16 = conv(bias = blocks_1_attn_value_bias_to_fp16, dilations = var_294_dilations_0, groups = var_294_groups_0, pad = var_294_pad_0, pad_type = var_294_pad_type_0, strides = var_294_strides_0, weight = blocks_1_attn_value_weight_to_fp16, x = input_13_cast_fp16)[name = tensor<string, []>("op_294_cast_fp16")];
            tensor<int32, [8]> tile_3 = const()[name = tensor<string, []>("tile_3"), val = tensor<int32, [8]>([64, 64, 64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_297_axis_0 = const()[name = tensor<string, []>("op_297_axis_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 64, 1, 1500]> var_297_cast_fp16_0, tensor<fp16, [1, 64, 1, 1500]> var_297_cast_fp16_1, tensor<fp16, [1, 64, 1, 1500]> var_297_cast_fp16_2, tensor<fp16, [1, 64, 1, 1500]> var_297_cast_fp16_3, tensor<fp16, [1, 64, 1, 1500]> var_297_cast_fp16_4, tensor<fp16, [1, 64, 1, 1500]> var_297_cast_fp16_5, tensor<fp16, [1, 64, 1, 1500]> var_297_cast_fp16_6, tensor<fp16, [1, 64, 1, 1500]> var_297_cast_fp16_7 = split(axis = var_297_axis_0, split_sizes = tile_3, x = var_296_cast_fp16)[name = tensor<string, []>("op_297_cast_fp16")];
            tensor<int32, [4]> var_306_perm_0 = const()[name = tensor<string, []>("op_306_perm_0"), val = tensor<int32, [4]>([0, 3, 2, 1])];
            tensor<int32, [8]> tile_4 = const()[name = tensor<string, []>("tile_4"), val = tensor<int32, [8]>([64, 64, 64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_307_axis_0 = const()[name = tensor<string, []>("op_307_axis_0"), val = tensor<int32, []>(3)];
            tensor<fp16, [1, 1500, 1, 512]> var_306_cast_fp16 = transpose(perm = var_306_perm_0, x = k_3_cast_fp16)[name = tensor<string, []>("transpose_5")];
            tensor<fp16, [1, 1500, 1, 64]> var_307_cast_fp16_0, tensor<fp16, [1, 1500, 1, 64]> var_307_cast_fp16_1, tensor<fp16, [1, 1500, 1, 64]> var_307_cast_fp16_2, tensor<fp16, [1, 1500, 1, 64]> var_307_cast_fp16_3, tensor<fp16, [1, 1500, 1, 64]> var_307_cast_fp16_4, tensor<fp16, [1, 1500, 1, 64]> var_307_cast_fp16_5, tensor<fp16, [1, 1500, 1, 64]> var_307_cast_fp16_6, tensor<fp16, [1, 1500, 1, 64]> var_307_cast_fp16_7 = split(axis = var_307_axis_0, split_sizes = tile_4, x = var_306_cast_fp16)[name = tensor<string, []>("op_307_cast_fp16")];
            tensor<int32, [8]> tile_5 = const()[name = tensor<string, []>("tile_5"), val = tensor<int32, [8]>([64, 64, 64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_316_axis_0 = const()[name = tensor<string, []>("op_316_axis_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 64, 1, 1500]> var_316_cast_fp16_0, tensor<fp16, [1, 64, 1, 1500]> var_316_cast_fp16_1, tensor<fp16, [1, 64, 1, 1500]> var_316_cast_fp16_2, tensor<fp16, [1, 64, 1, 1500]> var_316_cast_fp16_3, tensor<fp16, [1, 64, 1, 1500]> var_316_cast_fp16_4, tensor<fp16, [1, 64, 1, 1500]> var_316_cast_fp16_5, tensor<fp16, [1, 64, 1, 1500]> var_316_cast_fp16_6, tensor<fp16, [1, 64, 1, 1500]> var_316_cast_fp16_7 = split(axis = var_316_axis_0, split_sizes = tile_5, x = var_294_cast_fp16)[name = tensor<string, []>("op_316_cast_fp16")];
            tensor<string, []> aw_17_equation_0 = const()[name = tensor<string, []>("aw_17_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_17_cast_fp16 = einsum(equation = aw_17_equation_0, values = (var_307_cast_fp16_0, var_297_cast_fp16_0))[name = tensor<string, []>("aw_17_cast_fp16")];
            tensor<string, []> aw_19_equation_0 = const()[name = tensor<string, []>("aw_19_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_19_cast_fp16 = einsum(equation = aw_19_equation_0, values = (var_307_cast_fp16_1, var_297_cast_fp16_1))[name = tensor<string, []>("aw_19_cast_fp16")];
            tensor<string, []> aw_21_equation_0 = const()[name = tensor<string, []>("aw_21_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_21_cast_fp16 = einsum(equation = aw_21_equation_0, values = (var_307_cast_fp16_2, var_297_cast_fp16_2))[name = tensor<string, []>("aw_21_cast_fp16")];
            tensor<string, []> aw_23_equation_0 = const()[name = tensor<string, []>("aw_23_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_23_cast_fp16 = einsum(equation = aw_23_equation_0, values = (var_307_cast_fp16_3, var_297_cast_fp16_3))[name = tensor<string, []>("aw_23_cast_fp16")];
            tensor<string, []> aw_25_equation_0 = const()[name = tensor<string, []>("aw_25_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_25_cast_fp16 = einsum(equation = aw_25_equation_0, values = (var_307_cast_fp16_4, var_297_cast_fp16_4))[name = tensor<string, []>("aw_25_cast_fp16")];
            tensor<string, []> aw_27_equation_0 = const()[name = tensor<string, []>("aw_27_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_27_cast_fp16 = einsum(equation = aw_27_equation_0, values = (var_307_cast_fp16_5, var_297_cast_fp16_5))[name = tensor<string, []>("aw_27_cast_fp16")];
            tensor<string, []> aw_29_equation_0 = const()[name = tensor<string, []>("aw_29_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_29_cast_fp16 = einsum(equation = aw_29_equation_0, values = (var_307_cast_fp16_6, var_297_cast_fp16_6))[name = tensor<string, []>("aw_29_cast_fp16")];
            tensor<string, []> aw_31_equation_0 = const()[name = tensor<string, []>("aw_31_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_31_cast_fp16 = einsum(equation = aw_31_equation_0, values = (var_307_cast_fp16_7, var_297_cast_fp16_7))[name = tensor<string, []>("aw_31_cast_fp16")];
            tensor<fp16, [1, 1500, 1, 1500]> var_341_cast_fp16 = softmax(axis = var_245, x = aw_17_cast_fp16)[name = tensor<string, []>("op_341_cast_fp16")];
            tensor<fp16, [1, 1500, 1, 1500]> var_342_cast_fp16 = softmax(axis = var_245, x = aw_19_cast_fp16)[name = tensor<string, []>("op_342_cast_fp16")];
            tensor<fp16, [1, 1500, 1, 1500]> var_343_cast_fp16 = softmax(axis = var_245, x = aw_21_cast_fp16)[name = tensor<string, []>("op_343_cast_fp16")];
            tensor<fp16, [1, 1500, 1, 1500]> var_344_cast_fp16 = softmax(axis = var_245, x = aw_23_cast_fp16)[name = tensor<string, []>("op_344_cast_fp16")];
            tensor<fp16, [1, 1500, 1, 1500]> var_345_cast_fp16 = softmax(axis = var_245, x = aw_25_cast_fp16)[name = tensor<string, []>("op_345_cast_fp16")];
            tensor<fp16, [1, 1500, 1, 1500]> var_346_cast_fp16 = softmax(axis = var_245, x = aw_27_cast_fp16)[name = tensor<string, []>("op_346_cast_fp16")];
            tensor<fp16, [1, 1500, 1, 1500]> var_347_cast_fp16 = softmax(axis = var_245, x = aw_29_cast_fp16)[name = tensor<string, []>("op_347_cast_fp16")];
            tensor<fp16, [1, 1500, 1, 1500]> var_348_cast_fp16 = softmax(axis = var_245, x = aw_31_cast_fp16)[name = tensor<string, []>("op_348_cast_fp16")];
            tensor<string, []> var_350_equation_0 = const()[name = tensor<string, []>("op_350_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_350_cast_fp16 = einsum(equation = var_350_equation_0, values = (var_316_cast_fp16_0, var_341_cast_fp16))[name = tensor<string, []>("op_350_cast_fp16")];
            tensor<string, []> var_352_equation_0 = const()[name = tensor<string, []>("op_352_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_352_cast_fp16 = einsum(equation = var_352_equation_0, values = (var_316_cast_fp16_1, var_342_cast_fp16))[name = tensor<string, []>("op_352_cast_fp16")];
            tensor<string, []> var_354_equation_0 = const()[name = tensor<string, []>("op_354_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_354_cast_fp16 = einsum(equation = var_354_equation_0, values = (var_316_cast_fp16_2, var_343_cast_fp16))[name = tensor<string, []>("op_354_cast_fp16")];
            tensor<string, []> var_356_equation_0 = const()[name = tensor<string, []>("op_356_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_356_cast_fp16 = einsum(equation = var_356_equation_0, values = (var_316_cast_fp16_3, var_344_cast_fp16))[name = tensor<string, []>("op_356_cast_fp16")];
            tensor<string, []> var_358_equation_0 = const()[name = tensor<string, []>("op_358_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_358_cast_fp16 = einsum(equation = var_358_equation_0, values = (var_316_cast_fp16_4, var_345_cast_fp16))[name = tensor<string, []>("op_358_cast_fp16")];
            tensor<string, []> var_360_equation_0 = const()[name = tensor<string, []>("op_360_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_360_cast_fp16 = einsum(equation = var_360_equation_0, values = (var_316_cast_fp16_5, var_346_cast_fp16))[name = tensor<string, []>("op_360_cast_fp16")];
            tensor<string, []> var_362_equation_0 = const()[name = tensor<string, []>("op_362_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_362_cast_fp16 = einsum(equation = var_362_equation_0, values = (var_316_cast_fp16_6, var_347_cast_fp16))[name = tensor<string, []>("op_362_cast_fp16")];
            tensor<string, []> var_364_equation_0 = const()[name = tensor<string, []>("op_364_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_364_cast_fp16 = einsum(equation = var_364_equation_0, values = (var_316_cast_fp16_7, var_348_cast_fp16))[name = tensor<string, []>("op_364_cast_fp16")];
            tensor<bool, []> input_15_interleave_0 = const()[name = tensor<string, []>("input_15_interleave_0"), val = tensor<bool, []>(false)];
            tensor<fp16, [1, 512, 1, 1500]> input_15_cast_fp16 = concat(axis = var_245, interleave = input_15_interleave_0, values = (var_350_cast_fp16, var_352_cast_fp16, var_354_cast_fp16, var_356_cast_fp16, var_358_cast_fp16, var_360_cast_fp16, var_362_cast_fp16, var_364_cast_fp16))[name = tensor<string, []>("input_15_cast_fp16")];
            tensor<string, []> var_373_pad_type_0 = const()[name = tensor<string, []>("op_373_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> var_373_strides_0 = const()[name = tensor<string, []>("op_373_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> var_373_pad_0 = const()[name = tensor<string, []>("op_373_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> var_373_dilations_0 = const()[name = tensor<string, []>("op_373_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> var_373_groups_0 = const()[name = tensor<string, []>("op_373_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [512, 512, 1, 1]> blocks_1_attn_out_weight_to_fp16 = const()[name = tensor<string, []>("blocks_1_attn_out_weight_to_fp16"), val = tensor<fp16, [512, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(11239168)))];
            tensor<fp16, [512]> blocks_1_attn_out_bias_to_fp16 = const()[name = tensor<string, []>("blocks_1_attn_out_bias_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(11763520)))];
            tensor<fp16, [1, 512, 1, 1500]> var_373_cast_fp16 = conv(bias = blocks_1_attn_out_bias_to_fp16, dilations = var_373_dilations_0, groups = var_373_groups_0, pad = var_373_pad_0, pad_type = var_373_pad_type_0, strides = var_373_strides_0, weight = blocks_1_attn_out_weight_to_fp16, x = input_15_cast_fp16)[name = tensor<string, []>("op_373_cast_fp16")];
            tensor<fp16, [1, 512, 1, 1500]> inputs_7_cast_fp16 = add(x = inputs_5_cast_fp16, y = var_373_cast_fp16)[name = tensor<string, []>("inputs_7_cast_fp16")];
            tensor<int32, [1]> input_17_axes_0 = const()[name = tensor<string, []>("input_17_axes_0"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [512]> input_17_gamma_0_to_fp16 = const()[name = tensor<string, []>("input_17_gamma_0_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(11764608)))];
            tensor<fp16, [512]> input_17_beta_0_to_fp16 = const()[name = tensor<string, []>("input_17_beta_0_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(11765696)))];
            tensor<fp16, []> var_383_to_fp16 = const()[name = tensor<string, []>("op_383_to_fp16"), val = tensor<fp16, []>(0x1.5p-17)];
            tensor<fp16, [1, 512, 1, 1500]> input_17_cast_fp16 = layer_norm(axes = input_17_axes_0, beta = input_17_beta_0_to_fp16, epsilon = var_383_to_fp16, gamma = input_17_gamma_0_to_fp16, x = inputs_7_cast_fp16)[name = tensor<string, []>("input_17_cast_fp16")];
            tensor<string, []> input_19_pad_type_0 = const()[name = tensor<string, []>("input_19_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_19_strides_0 = const()[name = tensor<string, []>("input_19_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> input_19_pad_0 = const()[name = tensor<string, []>("input_19_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_19_dilations_0 = const()[name = tensor<string, []>("input_19_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_19_groups_0 = const()[name = tensor<string, []>("input_19_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [2048, 512, 1, 1]> blocks_1_mlp_0_weight_to_fp16 = const()[name = tensor<string, []>("blocks_1_mlp_0_weight_to_fp16"), val = tensor<fp16, [2048, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(11766784)))];
            tensor<fp16, [2048]> blocks_1_mlp_0_bias_to_fp16 = const()[name = tensor<string, []>("blocks_1_mlp_0_bias_to_fp16"), val = tensor<fp16, [2048]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(13864000)))];
            tensor<fp16, [1, 2048, 1, 1500]> input_19_cast_fp16 = conv(bias = blocks_1_mlp_0_bias_to_fp16, dilations = input_19_dilations_0, groups = input_19_groups_0, pad = input_19_pad_0, pad_type = input_19_pad_type_0, strides = input_19_strides_0, weight = blocks_1_mlp_0_weight_to_fp16, x = input_17_cast_fp16)[name = tensor<string, []>("input_19_cast_fp16")];
            tensor<string, []> input_21_mode_0 = const()[name = tensor<string, []>("input_21_mode_0"), val = tensor<string, []>("EXACT")];
            tensor<fp16, [1, 2048, 1, 1500]> input_21_cast_fp16 = gelu(mode = input_21_mode_0, x = input_19_cast_fp16)[name = tensor<string, []>("input_21_cast_fp16")];
            tensor<string, []> var_409_pad_type_0 = const()[name = tensor<string, []>("op_409_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> var_409_strides_0 = const()[name = tensor<string, []>("op_409_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> var_409_pad_0 = const()[name = tensor<string, []>("op_409_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> var_409_dilations_0 = const()[name = tensor<string, []>("op_409_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> var_409_groups_0 = const()[name = tensor<string, []>("op_409_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [512, 2048, 1, 1]> blocks_1_mlp_2_weight_to_fp16 = const()[name = tensor<string, []>("blocks_1_mlp_2_weight_to_fp16"), val = tensor<fp16, [512, 2048, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(13868160)))];
            tensor<fp16, [512]> blocks_1_mlp_2_bias_to_fp16 = const()[name = tensor<string, []>("blocks_1_mlp_2_bias_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(15965376)))];
            tensor<fp16, [1, 512, 1, 1500]> var_409_cast_fp16 = conv(bias = blocks_1_mlp_2_bias_to_fp16, dilations = var_409_dilations_0, groups = var_409_groups_0, pad = var_409_pad_0, pad_type = var_409_pad_type_0, strides = var_409_strides_0, weight = blocks_1_mlp_2_weight_to_fp16, x = input_21_cast_fp16)[name = tensor<string, []>("op_409_cast_fp16")];
            tensor<fp16, [1, 512, 1, 1500]> inputs_9_cast_fp16 = add(x = inputs_7_cast_fp16, y = var_409_cast_fp16)[name = tensor<string, []>("inputs_9_cast_fp16")];
            tensor<int32, []> var_418 = const()[name = tensor<string, []>("op_418"), val = tensor<int32, []>(1)];
            tensor<int32, [1]> input_23_axes_0 = const()[name = tensor<string, []>("input_23_axes_0"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [512]> input_23_gamma_0_to_fp16 = const()[name = tensor<string, []>("input_23_gamma_0_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(15966464)))];
            tensor<fp16, [512]> input_23_beta_0_to_fp16 = const()[name = tensor<string, []>("input_23_beta_0_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(15967552)))];
            tensor<fp16, []> var_434_to_fp16 = const()[name = tensor<string, []>("op_434_to_fp16"), val = tensor<fp16, []>(0x1.5p-17)];
            tensor<fp16, [1, 512, 1, 1500]> input_23_cast_fp16 = layer_norm(axes = input_23_axes_0, beta = input_23_beta_0_to_fp16, epsilon = var_434_to_fp16, gamma = input_23_gamma_0_to_fp16, x = inputs_9_cast_fp16)[name = tensor<string, []>("input_23_cast_fp16")];
            tensor<string, []> q_5_pad_type_0 = const()[name = tensor<string, []>("q_5_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> q_5_strides_0 = const()[name = tensor<string, []>("q_5_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> q_5_pad_0 = const()[name = tensor<string, []>("q_5_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> q_5_dilations_0 = const()[name = tensor<string, []>("q_5_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> q_5_groups_0 = const()[name = tensor<string, []>("q_5_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [512, 512, 1, 1]> var_469_weight_0_to_fp16 = const()[name = tensor<string, []>("op_469_weight_0_to_fp16"), val = tensor<fp16, [512, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(15968640)))];
            tensor<fp16, [512]> var_469_bias_0_to_fp16 = const()[name = tensor<string, []>("op_469_bias_0_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(16492992)))];
            tensor<fp16, [1, 512, 1, 1500]> var_469_cast_fp16 = conv(bias = var_469_bias_0_to_fp16, dilations = q_5_dilations_0, groups = q_5_groups_0, pad = q_5_pad_0, pad_type = q_5_pad_type_0, strides = q_5_strides_0, weight = var_469_weight_0_to_fp16, x = input_23_cast_fp16)[name = tensor<string, []>("op_469_cast_fp16")];
            tensor<string, []> k_5_pad_type_0 = const()[name = tensor<string, []>("k_5_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> k_5_strides_0 = const()[name = tensor<string, []>("k_5_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> k_5_pad_0 = const()[name = tensor<string, []>("k_5_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> k_5_dilations_0 = const()[name = tensor<string, []>("k_5_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> k_5_groups_0 = const()[name = tensor<string, []>("k_5_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [512, 512, 1, 1]> blocks_2_attn_key_weight_to_fp16 = const()[name = tensor<string, []>("blocks_2_attn_key_weight_to_fp16"), val = tensor<fp16, [512, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(16494080)))];
            tensor<fp16, [1, 512, 1, 1500]> k_5_cast_fp16 = conv(dilations = k_5_dilations_0, groups = k_5_groups_0, pad = k_5_pad_0, pad_type = k_5_pad_type_0, strides = k_5_strides_0, weight = blocks_2_attn_key_weight_to_fp16, x = input_23_cast_fp16)[name = tensor<string, []>("k_5_cast_fp16")];
            tensor<string, []> var_467_pad_type_0 = const()[name = tensor<string, []>("op_467_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> var_467_strides_0 = const()[name = tensor<string, []>("op_467_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> var_467_pad_0 = const()[name = tensor<string, []>("op_467_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> var_467_dilations_0 = const()[name = tensor<string, []>("op_467_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> var_467_groups_0 = const()[name = tensor<string, []>("op_467_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [512, 512, 1, 1]> blocks_2_attn_value_weight_to_fp16 = const()[name = tensor<string, []>("blocks_2_attn_value_weight_to_fp16"), val = tensor<fp16, [512, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(17018432)))];
            tensor<fp16, [512]> blocks_2_attn_value_bias_to_fp16 = const()[name = tensor<string, []>("blocks_2_attn_value_bias_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(17542784)))];
            tensor<fp16, [1, 512, 1, 1500]> var_467_cast_fp16 = conv(bias = blocks_2_attn_value_bias_to_fp16, dilations = var_467_dilations_0, groups = var_467_groups_0, pad = var_467_pad_0, pad_type = var_467_pad_type_0, strides = var_467_strides_0, weight = blocks_2_attn_value_weight_to_fp16, x = input_23_cast_fp16)[name = tensor<string, []>("op_467_cast_fp16")];
            tensor<int32, [8]> tile_6 = const()[name = tensor<string, []>("tile_6"), val = tensor<int32, [8]>([64, 64, 64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_470_axis_0 = const()[name = tensor<string, []>("op_470_axis_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 64, 1, 1500]> var_470_cast_fp16_0, tensor<fp16, [1, 64, 1, 1500]> var_470_cast_fp16_1, tensor<fp16, [1, 64, 1, 1500]> var_470_cast_fp16_2, tensor<fp16, [1, 64, 1, 1500]> var_470_cast_fp16_3, tensor<fp16, [1, 64, 1, 1500]> var_470_cast_fp16_4, tensor<fp16, [1, 64, 1, 1500]> var_470_cast_fp16_5, tensor<fp16, [1, 64, 1, 1500]> var_470_cast_fp16_6, tensor<fp16, [1, 64, 1, 1500]> var_470_cast_fp16_7 = split(axis = var_470_axis_0, split_sizes = tile_6, x = var_469_cast_fp16)[name = tensor<string, []>("op_470_cast_fp16")];
            tensor<int32, [4]> var_479_perm_0 = const()[name = tensor<string, []>("op_479_perm_0"), val = tensor<int32, [4]>([0, 3, 2, 1])];
            tensor<int32, [8]> tile_7 = const()[name = tensor<string, []>("tile_7"), val = tensor<int32, [8]>([64, 64, 64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_480_axis_0 = const()[name = tensor<string, []>("op_480_axis_0"), val = tensor<int32, []>(3)];
            tensor<fp16, [1, 1500, 1, 512]> var_479_cast_fp16 = transpose(perm = var_479_perm_0, x = k_5_cast_fp16)[name = tensor<string, []>("transpose_4")];
            tensor<fp16, [1, 1500, 1, 64]> var_480_cast_fp16_0, tensor<fp16, [1, 1500, 1, 64]> var_480_cast_fp16_1, tensor<fp16, [1, 1500, 1, 64]> var_480_cast_fp16_2, tensor<fp16, [1, 1500, 1, 64]> var_480_cast_fp16_3, tensor<fp16, [1, 1500, 1, 64]> var_480_cast_fp16_4, tensor<fp16, [1, 1500, 1, 64]> var_480_cast_fp16_5, tensor<fp16, [1, 1500, 1, 64]> var_480_cast_fp16_6, tensor<fp16, [1, 1500, 1, 64]> var_480_cast_fp16_7 = split(axis = var_480_axis_0, split_sizes = tile_7, x = var_479_cast_fp16)[name = tensor<string, []>("op_480_cast_fp16")];
            tensor<int32, [8]> tile_8 = const()[name = tensor<string, []>("tile_8"), val = tensor<int32, [8]>([64, 64, 64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_489_axis_0 = const()[name = tensor<string, []>("op_489_axis_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 64, 1, 1500]> var_489_cast_fp16_0, tensor<fp16, [1, 64, 1, 1500]> var_489_cast_fp16_1, tensor<fp16, [1, 64, 1, 1500]> var_489_cast_fp16_2, tensor<fp16, [1, 64, 1, 1500]> var_489_cast_fp16_3, tensor<fp16, [1, 64, 1, 1500]> var_489_cast_fp16_4, tensor<fp16, [1, 64, 1, 1500]> var_489_cast_fp16_5, tensor<fp16, [1, 64, 1, 1500]> var_489_cast_fp16_6, tensor<fp16, [1, 64, 1, 1500]> var_489_cast_fp16_7 = split(axis = var_489_axis_0, split_sizes = tile_8, x = var_467_cast_fp16)[name = tensor<string, []>("op_489_cast_fp16")];
            tensor<string, []> aw_33_equation_0 = const()[name = tensor<string, []>("aw_33_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_33_cast_fp16 = einsum(equation = aw_33_equation_0, values = (var_480_cast_fp16_0, var_470_cast_fp16_0))[name = tensor<string, []>("aw_33_cast_fp16")];
            tensor<string, []> aw_35_equation_0 = const()[name = tensor<string, []>("aw_35_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_35_cast_fp16 = einsum(equation = aw_35_equation_0, values = (var_480_cast_fp16_1, var_470_cast_fp16_1))[name = tensor<string, []>("aw_35_cast_fp16")];
            tensor<string, []> aw_37_equation_0 = const()[name = tensor<string, []>("aw_37_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_37_cast_fp16 = einsum(equation = aw_37_equation_0, values = (var_480_cast_fp16_2, var_470_cast_fp16_2))[name = tensor<string, []>("aw_37_cast_fp16")];
            tensor<string, []> aw_39_equation_0 = const()[name = tensor<string, []>("aw_39_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_39_cast_fp16 = einsum(equation = aw_39_equation_0, values = (var_480_cast_fp16_3, var_470_cast_fp16_3))[name = tensor<string, []>("aw_39_cast_fp16")];
            tensor<string, []> aw_41_equation_0 = const()[name = tensor<string, []>("aw_41_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_41_cast_fp16 = einsum(equation = aw_41_equation_0, values = (var_480_cast_fp16_4, var_470_cast_fp16_4))[name = tensor<string, []>("aw_41_cast_fp16")];
            tensor<string, []> aw_43_equation_0 = const()[name = tensor<string, []>("aw_43_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_43_cast_fp16 = einsum(equation = aw_43_equation_0, values = (var_480_cast_fp16_5, var_470_cast_fp16_5))[name = tensor<string, []>("aw_43_cast_fp16")];
            tensor<string, []> aw_45_equation_0 = const()[name = tensor<string, []>("aw_45_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_45_cast_fp16 = einsum(equation = aw_45_equation_0, values = (var_480_cast_fp16_6, var_470_cast_fp16_6))[name = tensor<string, []>("aw_45_cast_fp16")];
            tensor<string, []> aw_47_equation_0 = const()[name = tensor<string, []>("aw_47_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_47_cast_fp16 = einsum(equation = aw_47_equation_0, values = (var_480_cast_fp16_7, var_470_cast_fp16_7))[name = tensor<string, []>("aw_47_cast_fp16")];
            tensor<fp16, [1, 1500, 1, 1500]> var_514_cast_fp16 = softmax(axis = var_418, x = aw_33_cast_fp16)[name = tensor<string, []>("op_514_cast_fp16")];
            tensor<fp16, [1, 1500, 1, 1500]> var_515_cast_fp16 = softmax(axis = var_418, x = aw_35_cast_fp16)[name = tensor<string, []>("op_515_cast_fp16")];
            tensor<fp16, [1, 1500, 1, 1500]> var_516_cast_fp16 = softmax(axis = var_418, x = aw_37_cast_fp16)[name = tensor<string, []>("op_516_cast_fp16")];
            tensor<fp16, [1, 1500, 1, 1500]> var_517_cast_fp16 = softmax(axis = var_418, x = aw_39_cast_fp16)[name = tensor<string, []>("op_517_cast_fp16")];
            tensor<fp16, [1, 1500, 1, 1500]> var_518_cast_fp16 = softmax(axis = var_418, x = aw_41_cast_fp16)[name = tensor<string, []>("op_518_cast_fp16")];
            tensor<fp16, [1, 1500, 1, 1500]> var_519_cast_fp16 = softmax(axis = var_418, x = aw_43_cast_fp16)[name = tensor<string, []>("op_519_cast_fp16")];
            tensor<fp16, [1, 1500, 1, 1500]> var_520_cast_fp16 = softmax(axis = var_418, x = aw_45_cast_fp16)[name = tensor<string, []>("op_520_cast_fp16")];
            tensor<fp16, [1, 1500, 1, 1500]> var_521_cast_fp16 = softmax(axis = var_418, x = aw_47_cast_fp16)[name = tensor<string, []>("op_521_cast_fp16")];
            tensor<string, []> var_523_equation_0 = const()[name = tensor<string, []>("op_523_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_523_cast_fp16 = einsum(equation = var_523_equation_0, values = (var_489_cast_fp16_0, var_514_cast_fp16))[name = tensor<string, []>("op_523_cast_fp16")];
            tensor<string, []> var_525_equation_0 = const()[name = tensor<string, []>("op_525_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_525_cast_fp16 = einsum(equation = var_525_equation_0, values = (var_489_cast_fp16_1, var_515_cast_fp16))[name = tensor<string, []>("op_525_cast_fp16")];
            tensor<string, []> var_527_equation_0 = const()[name = tensor<string, []>("op_527_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_527_cast_fp16 = einsum(equation = var_527_equation_0, values = (var_489_cast_fp16_2, var_516_cast_fp16))[name = tensor<string, []>("op_527_cast_fp16")];
            tensor<string, []> var_529_equation_0 = const()[name = tensor<string, []>("op_529_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_529_cast_fp16 = einsum(equation = var_529_equation_0, values = (var_489_cast_fp16_3, var_517_cast_fp16))[name = tensor<string, []>("op_529_cast_fp16")];
            tensor<string, []> var_531_equation_0 = const()[name = tensor<string, []>("op_531_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_531_cast_fp16 = einsum(equation = var_531_equation_0, values = (var_489_cast_fp16_4, var_518_cast_fp16))[name = tensor<string, []>("op_531_cast_fp16")];
            tensor<string, []> var_533_equation_0 = const()[name = tensor<string, []>("op_533_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_533_cast_fp16 = einsum(equation = var_533_equation_0, values = (var_489_cast_fp16_5, var_519_cast_fp16))[name = tensor<string, []>("op_533_cast_fp16")];
            tensor<string, []> var_535_equation_0 = const()[name = tensor<string, []>("op_535_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_535_cast_fp16 = einsum(equation = var_535_equation_0, values = (var_489_cast_fp16_6, var_520_cast_fp16))[name = tensor<string, []>("op_535_cast_fp16")];
            tensor<string, []> var_537_equation_0 = const()[name = tensor<string, []>("op_537_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_537_cast_fp16 = einsum(equation = var_537_equation_0, values = (var_489_cast_fp16_7, var_521_cast_fp16))[name = tensor<string, []>("op_537_cast_fp16")];
            tensor<bool, []> input_25_interleave_0 = const()[name = tensor<string, []>("input_25_interleave_0"), val = tensor<bool, []>(false)];
            tensor<fp16, [1, 512, 1, 1500]> input_25_cast_fp16 = concat(axis = var_418, interleave = input_25_interleave_0, values = (var_523_cast_fp16, var_525_cast_fp16, var_527_cast_fp16, var_529_cast_fp16, var_531_cast_fp16, var_533_cast_fp16, var_535_cast_fp16, var_537_cast_fp16))[name = tensor<string, []>("input_25_cast_fp16")];
            tensor<string, []> var_546_pad_type_0 = const()[name = tensor<string, []>("op_546_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> var_546_strides_0 = const()[name = tensor<string, []>("op_546_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> var_546_pad_0 = const()[name = tensor<string, []>("op_546_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> var_546_dilations_0 = const()[name = tensor<string, []>("op_546_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> var_546_groups_0 = const()[name = tensor<string, []>("op_546_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [512, 512, 1, 1]> blocks_2_attn_out_weight_to_fp16 = const()[name = tensor<string, []>("blocks_2_attn_out_weight_to_fp16"), val = tensor<fp16, [512, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(17543872)))];
            tensor<fp16, [512]> blocks_2_attn_out_bias_to_fp16 = const()[name = tensor<string, []>("blocks_2_attn_out_bias_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(18068224)))];
            tensor<fp16, [1, 512, 1, 1500]> var_546_cast_fp16 = conv(bias = blocks_2_attn_out_bias_to_fp16, dilations = var_546_dilations_0, groups = var_546_groups_0, pad = var_546_pad_0, pad_type = var_546_pad_type_0, strides = var_546_strides_0, weight = blocks_2_attn_out_weight_to_fp16, x = input_25_cast_fp16)[name = tensor<string, []>("op_546_cast_fp16")];
            tensor<fp16, [1, 512, 1, 1500]> inputs_11_cast_fp16 = add(x = inputs_9_cast_fp16, y = var_546_cast_fp16)[name = tensor<string, []>("inputs_11_cast_fp16")];
            tensor<int32, [1]> input_27_axes_0 = const()[name = tensor<string, []>("input_27_axes_0"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [512]> input_27_gamma_0_to_fp16 = const()[name = tensor<string, []>("input_27_gamma_0_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(18069312)))];
            tensor<fp16, [512]> input_27_beta_0_to_fp16 = const()[name = tensor<string, []>("input_27_beta_0_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(18070400)))];
            tensor<fp16, []> var_556_to_fp16 = const()[name = tensor<string, []>("op_556_to_fp16"), val = tensor<fp16, []>(0x1.5p-17)];
            tensor<fp16, [1, 512, 1, 1500]> input_27_cast_fp16 = layer_norm(axes = input_27_axes_0, beta = input_27_beta_0_to_fp16, epsilon = var_556_to_fp16, gamma = input_27_gamma_0_to_fp16, x = inputs_11_cast_fp16)[name = tensor<string, []>("input_27_cast_fp16")];
            tensor<string, []> input_29_pad_type_0 = const()[name = tensor<string, []>("input_29_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_29_strides_0 = const()[name = tensor<string, []>("input_29_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> input_29_pad_0 = const()[name = tensor<string, []>("input_29_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_29_dilations_0 = const()[name = tensor<string, []>("input_29_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_29_groups_0 = const()[name = tensor<string, []>("input_29_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [2048, 512, 1, 1]> blocks_2_mlp_0_weight_to_fp16 = const()[name = tensor<string, []>("blocks_2_mlp_0_weight_to_fp16"), val = tensor<fp16, [2048, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(18071488)))];
            tensor<fp16, [2048]> blocks_2_mlp_0_bias_to_fp16 = const()[name = tensor<string, []>("blocks_2_mlp_0_bias_to_fp16"), val = tensor<fp16, [2048]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(20168704)))];
            tensor<fp16, [1, 2048, 1, 1500]> input_29_cast_fp16 = conv(bias = blocks_2_mlp_0_bias_to_fp16, dilations = input_29_dilations_0, groups = input_29_groups_0, pad = input_29_pad_0, pad_type = input_29_pad_type_0, strides = input_29_strides_0, weight = blocks_2_mlp_0_weight_to_fp16, x = input_27_cast_fp16)[name = tensor<string, []>("input_29_cast_fp16")];
            tensor<string, []> input_31_mode_0 = const()[name = tensor<string, []>("input_31_mode_0"), val = tensor<string, []>("EXACT")];
            tensor<fp16, [1, 2048, 1, 1500]> input_31_cast_fp16 = gelu(mode = input_31_mode_0, x = input_29_cast_fp16)[name = tensor<string, []>("input_31_cast_fp16")];
            tensor<string, []> var_582_pad_type_0 = const()[name = tensor<string, []>("op_582_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> var_582_strides_0 = const()[name = tensor<string, []>("op_582_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> var_582_pad_0 = const()[name = tensor<string, []>("op_582_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> var_582_dilations_0 = const()[name = tensor<string, []>("op_582_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> var_582_groups_0 = const()[name = tensor<string, []>("op_582_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [512, 2048, 1, 1]> blocks_2_mlp_2_weight_to_fp16 = const()[name = tensor<string, []>("blocks_2_mlp_2_weight_to_fp16"), val = tensor<fp16, [512, 2048, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(20172864)))];
            tensor<fp16, [512]> blocks_2_mlp_2_bias_to_fp16 = const()[name = tensor<string, []>("blocks_2_mlp_2_bias_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(22270080)))];
            tensor<fp16, [1, 512, 1, 1500]> var_582_cast_fp16 = conv(bias = blocks_2_mlp_2_bias_to_fp16, dilations = var_582_dilations_0, groups = var_582_groups_0, pad = var_582_pad_0, pad_type = var_582_pad_type_0, strides = var_582_strides_0, weight = blocks_2_mlp_2_weight_to_fp16, x = input_31_cast_fp16)[name = tensor<string, []>("op_582_cast_fp16")];
            tensor<fp16, [1, 512, 1, 1500]> inputs_13_cast_fp16 = add(x = inputs_11_cast_fp16, y = var_582_cast_fp16)[name = tensor<string, []>("inputs_13_cast_fp16")];
            tensor<int32, []> var_591 = const()[name = tensor<string, []>("op_591"), val = tensor<int32, []>(1)];
            tensor<int32, [1]> input_33_axes_0 = const()[name = tensor<string, []>("input_33_axes_0"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [512]> input_33_gamma_0_to_fp16 = const()[name = tensor<string, []>("input_33_gamma_0_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(22271168)))];
            tensor<fp16, [512]> input_33_beta_0_to_fp16 = const()[name = tensor<string, []>("input_33_beta_0_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(22272256)))];
            tensor<fp16, []> var_607_to_fp16 = const()[name = tensor<string, []>("op_607_to_fp16"), val = tensor<fp16, []>(0x1.5p-17)];
            tensor<fp16, [1, 512, 1, 1500]> input_33_cast_fp16 = layer_norm(axes = input_33_axes_0, beta = input_33_beta_0_to_fp16, epsilon = var_607_to_fp16, gamma = input_33_gamma_0_to_fp16, x = inputs_13_cast_fp16)[name = tensor<string, []>("input_33_cast_fp16")];
            tensor<string, []> q_7_pad_type_0 = const()[name = tensor<string, []>("q_7_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> q_7_strides_0 = const()[name = tensor<string, []>("q_7_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> q_7_pad_0 = const()[name = tensor<string, []>("q_7_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> q_7_dilations_0 = const()[name = tensor<string, []>("q_7_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> q_7_groups_0 = const()[name = tensor<string, []>("q_7_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [512, 512, 1, 1]> var_642_weight_0_to_fp16 = const()[name = tensor<string, []>("op_642_weight_0_to_fp16"), val = tensor<fp16, [512, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(22273344)))];
            tensor<fp16, [512]> var_642_bias_0_to_fp16 = const()[name = tensor<string, []>("op_642_bias_0_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(22797696)))];
            tensor<fp16, [1, 512, 1, 1500]> var_642_cast_fp16 = conv(bias = var_642_bias_0_to_fp16, dilations = q_7_dilations_0, groups = q_7_groups_0, pad = q_7_pad_0, pad_type = q_7_pad_type_0, strides = q_7_strides_0, weight = var_642_weight_0_to_fp16, x = input_33_cast_fp16)[name = tensor<string, []>("op_642_cast_fp16")];
            tensor<string, []> k_7_pad_type_0 = const()[name = tensor<string, []>("k_7_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> k_7_strides_0 = const()[name = tensor<string, []>("k_7_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> k_7_pad_0 = const()[name = tensor<string, []>("k_7_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> k_7_dilations_0 = const()[name = tensor<string, []>("k_7_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> k_7_groups_0 = const()[name = tensor<string, []>("k_7_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [512, 512, 1, 1]> blocks_3_attn_key_weight_to_fp16 = const()[name = tensor<string, []>("blocks_3_attn_key_weight_to_fp16"), val = tensor<fp16, [512, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(22798784)))];
            tensor<fp16, [1, 512, 1, 1500]> k_7_cast_fp16 = conv(dilations = k_7_dilations_0, groups = k_7_groups_0, pad = k_7_pad_0, pad_type = k_7_pad_type_0, strides = k_7_strides_0, weight = blocks_3_attn_key_weight_to_fp16, x = input_33_cast_fp16)[name = tensor<string, []>("k_7_cast_fp16")];
            tensor<string, []> var_640_pad_type_0 = const()[name = tensor<string, []>("op_640_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> var_640_strides_0 = const()[name = tensor<string, []>("op_640_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> var_640_pad_0 = const()[name = tensor<string, []>("op_640_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> var_640_dilations_0 = const()[name = tensor<string, []>("op_640_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> var_640_groups_0 = const()[name = tensor<string, []>("op_640_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [512, 512, 1, 1]> blocks_3_attn_value_weight_to_fp16 = const()[name = tensor<string, []>("blocks_3_attn_value_weight_to_fp16"), val = tensor<fp16, [512, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(23323136)))];
            tensor<fp16, [512]> blocks_3_attn_value_bias_to_fp16 = const()[name = tensor<string, []>("blocks_3_attn_value_bias_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(23847488)))];
            tensor<fp16, [1, 512, 1, 1500]> var_640_cast_fp16 = conv(bias = blocks_3_attn_value_bias_to_fp16, dilations = var_640_dilations_0, groups = var_640_groups_0, pad = var_640_pad_0, pad_type = var_640_pad_type_0, strides = var_640_strides_0, weight = blocks_3_attn_value_weight_to_fp16, x = input_33_cast_fp16)[name = tensor<string, []>("op_640_cast_fp16")];
            tensor<int32, [8]> tile_9 = const()[name = tensor<string, []>("tile_9"), val = tensor<int32, [8]>([64, 64, 64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_643_axis_0 = const()[name = tensor<string, []>("op_643_axis_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 64, 1, 1500]> var_643_cast_fp16_0, tensor<fp16, [1, 64, 1, 1500]> var_643_cast_fp16_1, tensor<fp16, [1, 64, 1, 1500]> var_643_cast_fp16_2, tensor<fp16, [1, 64, 1, 1500]> var_643_cast_fp16_3, tensor<fp16, [1, 64, 1, 1500]> var_643_cast_fp16_4, tensor<fp16, [1, 64, 1, 1500]> var_643_cast_fp16_5, tensor<fp16, [1, 64, 1, 1500]> var_643_cast_fp16_6, tensor<fp16, [1, 64, 1, 1500]> var_643_cast_fp16_7 = split(axis = var_643_axis_0, split_sizes = tile_9, x = var_642_cast_fp16)[name = tensor<string, []>("op_643_cast_fp16")];
            tensor<int32, [4]> var_652_perm_0 = const()[name = tensor<string, []>("op_652_perm_0"), val = tensor<int32, [4]>([0, 3, 2, 1])];
            tensor<int32, [8]> tile_10 = const()[name = tensor<string, []>("tile_10"), val = tensor<int32, [8]>([64, 64, 64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_653_axis_0 = const()[name = tensor<string, []>("op_653_axis_0"), val = tensor<int32, []>(3)];
            tensor<fp16, [1, 1500, 1, 512]> var_652_cast_fp16 = transpose(perm = var_652_perm_0, x = k_7_cast_fp16)[name = tensor<string, []>("transpose_3")];
            tensor<fp16, [1, 1500, 1, 64]> var_653_cast_fp16_0, tensor<fp16, [1, 1500, 1, 64]> var_653_cast_fp16_1, tensor<fp16, [1, 1500, 1, 64]> var_653_cast_fp16_2, tensor<fp16, [1, 1500, 1, 64]> var_653_cast_fp16_3, tensor<fp16, [1, 1500, 1, 64]> var_653_cast_fp16_4, tensor<fp16, [1, 1500, 1, 64]> var_653_cast_fp16_5, tensor<fp16, [1, 1500, 1, 64]> var_653_cast_fp16_6, tensor<fp16, [1, 1500, 1, 64]> var_653_cast_fp16_7 = split(axis = var_653_axis_0, split_sizes = tile_10, x = var_652_cast_fp16)[name = tensor<string, []>("op_653_cast_fp16")];
            tensor<int32, [8]> tile_11 = const()[name = tensor<string, []>("tile_11"), val = tensor<int32, [8]>([64, 64, 64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_662_axis_0 = const()[name = tensor<string, []>("op_662_axis_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 64, 1, 1500]> var_662_cast_fp16_0, tensor<fp16, [1, 64, 1, 1500]> var_662_cast_fp16_1, tensor<fp16, [1, 64, 1, 1500]> var_662_cast_fp16_2, tensor<fp16, [1, 64, 1, 1500]> var_662_cast_fp16_3, tensor<fp16, [1, 64, 1, 1500]> var_662_cast_fp16_4, tensor<fp16, [1, 64, 1, 1500]> var_662_cast_fp16_5, tensor<fp16, [1, 64, 1, 1500]> var_662_cast_fp16_6, tensor<fp16, [1, 64, 1, 1500]> var_662_cast_fp16_7 = split(axis = var_662_axis_0, split_sizes = tile_11, x = var_640_cast_fp16)[name = tensor<string, []>("op_662_cast_fp16")];
            tensor<string, []> aw_49_equation_0 = const()[name = tensor<string, []>("aw_49_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_49_cast_fp16 = einsum(equation = aw_49_equation_0, values = (var_653_cast_fp16_0, var_643_cast_fp16_0))[name = tensor<string, []>("aw_49_cast_fp16")];
            tensor<string, []> aw_51_equation_0 = const()[name = tensor<string, []>("aw_51_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_51_cast_fp16 = einsum(equation = aw_51_equation_0, values = (var_653_cast_fp16_1, var_643_cast_fp16_1))[name = tensor<string, []>("aw_51_cast_fp16")];
            tensor<string, []> aw_53_equation_0 = const()[name = tensor<string, []>("aw_53_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_53_cast_fp16 = einsum(equation = aw_53_equation_0, values = (var_653_cast_fp16_2, var_643_cast_fp16_2))[name = tensor<string, []>("aw_53_cast_fp16")];
            tensor<string, []> aw_55_equation_0 = const()[name = tensor<string, []>("aw_55_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_55_cast_fp16 = einsum(equation = aw_55_equation_0, values = (var_653_cast_fp16_3, var_643_cast_fp16_3))[name = tensor<string, []>("aw_55_cast_fp16")];
            tensor<string, []> aw_57_equation_0 = const()[name = tensor<string, []>("aw_57_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_57_cast_fp16 = einsum(equation = aw_57_equation_0, values = (var_653_cast_fp16_4, var_643_cast_fp16_4))[name = tensor<string, []>("aw_57_cast_fp16")];
            tensor<string, []> aw_59_equation_0 = const()[name = tensor<string, []>("aw_59_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_59_cast_fp16 = einsum(equation = aw_59_equation_0, values = (var_653_cast_fp16_5, var_643_cast_fp16_5))[name = tensor<string, []>("aw_59_cast_fp16")];
            tensor<string, []> aw_61_equation_0 = const()[name = tensor<string, []>("aw_61_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_61_cast_fp16 = einsum(equation = aw_61_equation_0, values = (var_653_cast_fp16_6, var_643_cast_fp16_6))[name = tensor<string, []>("aw_61_cast_fp16")];
            tensor<string, []> aw_63_equation_0 = const()[name = tensor<string, []>("aw_63_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_63_cast_fp16 = einsum(equation = aw_63_equation_0, values = (var_653_cast_fp16_7, var_643_cast_fp16_7))[name = tensor<string, []>("aw_63_cast_fp16")];
            tensor<fp16, [1, 1500, 1, 1500]> var_687_cast_fp16 = softmax(axis = var_591, x = aw_49_cast_fp16)[name = tensor<string, []>("op_687_cast_fp16")];
            tensor<fp16, [1, 1500, 1, 1500]> var_688_cast_fp16 = softmax(axis = var_591, x = aw_51_cast_fp16)[name = tensor<string, []>("op_688_cast_fp16")];
            tensor<fp16, [1, 1500, 1, 1500]> var_689_cast_fp16 = softmax(axis = var_591, x = aw_53_cast_fp16)[name = tensor<string, []>("op_689_cast_fp16")];
            tensor<fp16, [1, 1500, 1, 1500]> var_690_cast_fp16 = softmax(axis = var_591, x = aw_55_cast_fp16)[name = tensor<string, []>("op_690_cast_fp16")];
            tensor<fp16, [1, 1500, 1, 1500]> var_691_cast_fp16 = softmax(axis = var_591, x = aw_57_cast_fp16)[name = tensor<string, []>("op_691_cast_fp16")];
            tensor<fp16, [1, 1500, 1, 1500]> var_692_cast_fp16 = softmax(axis = var_591, x = aw_59_cast_fp16)[name = tensor<string, []>("op_692_cast_fp16")];
            tensor<fp16, [1, 1500, 1, 1500]> var_693_cast_fp16 = softmax(axis = var_591, x = aw_61_cast_fp16)[name = tensor<string, []>("op_693_cast_fp16")];
            tensor<fp16, [1, 1500, 1, 1500]> var_694_cast_fp16 = softmax(axis = var_591, x = aw_63_cast_fp16)[name = tensor<string, []>("op_694_cast_fp16")];
            tensor<string, []> var_696_equation_0 = const()[name = tensor<string, []>("op_696_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_696_cast_fp16 = einsum(equation = var_696_equation_0, values = (var_662_cast_fp16_0, var_687_cast_fp16))[name = tensor<string, []>("op_696_cast_fp16")];
            tensor<string, []> var_698_equation_0 = const()[name = tensor<string, []>("op_698_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_698_cast_fp16 = einsum(equation = var_698_equation_0, values = (var_662_cast_fp16_1, var_688_cast_fp16))[name = tensor<string, []>("op_698_cast_fp16")];
            tensor<string, []> var_700_equation_0 = const()[name = tensor<string, []>("op_700_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_700_cast_fp16 = einsum(equation = var_700_equation_0, values = (var_662_cast_fp16_2, var_689_cast_fp16))[name = tensor<string, []>("op_700_cast_fp16")];
            tensor<string, []> var_702_equation_0 = const()[name = tensor<string, []>("op_702_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_702_cast_fp16 = einsum(equation = var_702_equation_0, values = (var_662_cast_fp16_3, var_690_cast_fp16))[name = tensor<string, []>("op_702_cast_fp16")];
            tensor<string, []> var_704_equation_0 = const()[name = tensor<string, []>("op_704_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_704_cast_fp16 = einsum(equation = var_704_equation_0, values = (var_662_cast_fp16_4, var_691_cast_fp16))[name = tensor<string, []>("op_704_cast_fp16")];
            tensor<string, []> var_706_equation_0 = const()[name = tensor<string, []>("op_706_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_706_cast_fp16 = einsum(equation = var_706_equation_0, values = (var_662_cast_fp16_5, var_692_cast_fp16))[name = tensor<string, []>("op_706_cast_fp16")];
            tensor<string, []> var_708_equation_0 = const()[name = tensor<string, []>("op_708_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_708_cast_fp16 = einsum(equation = var_708_equation_0, values = (var_662_cast_fp16_6, var_693_cast_fp16))[name = tensor<string, []>("op_708_cast_fp16")];
            tensor<string, []> var_710_equation_0 = const()[name = tensor<string, []>("op_710_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_710_cast_fp16 = einsum(equation = var_710_equation_0, values = (var_662_cast_fp16_7, var_694_cast_fp16))[name = tensor<string, []>("op_710_cast_fp16")];
            tensor<bool, []> input_35_interleave_0 = const()[name = tensor<string, []>("input_35_interleave_0"), val = tensor<bool, []>(false)];
            tensor<fp16, [1, 512, 1, 1500]> input_35_cast_fp16 = concat(axis = var_591, interleave = input_35_interleave_0, values = (var_696_cast_fp16, var_698_cast_fp16, var_700_cast_fp16, var_702_cast_fp16, var_704_cast_fp16, var_706_cast_fp16, var_708_cast_fp16, var_710_cast_fp16))[name = tensor<string, []>("input_35_cast_fp16")];
            tensor<string, []> var_719_pad_type_0 = const()[name = tensor<string, []>("op_719_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> var_719_strides_0 = const()[name = tensor<string, []>("op_719_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> var_719_pad_0 = const()[name = tensor<string, []>("op_719_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> var_719_dilations_0 = const()[name = tensor<string, []>("op_719_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> var_719_groups_0 = const()[name = tensor<string, []>("op_719_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [512, 512, 1, 1]> blocks_3_attn_out_weight_to_fp16 = const()[name = tensor<string, []>("blocks_3_attn_out_weight_to_fp16"), val = tensor<fp16, [512, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(23848576)))];
            tensor<fp16, [512]> blocks_3_attn_out_bias_to_fp16 = const()[name = tensor<string, []>("blocks_3_attn_out_bias_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(24372928)))];
            tensor<fp16, [1, 512, 1, 1500]> var_719_cast_fp16 = conv(bias = blocks_3_attn_out_bias_to_fp16, dilations = var_719_dilations_0, groups = var_719_groups_0, pad = var_719_pad_0, pad_type = var_719_pad_type_0, strides = var_719_strides_0, weight = blocks_3_attn_out_weight_to_fp16, x = input_35_cast_fp16)[name = tensor<string, []>("op_719_cast_fp16")];
            tensor<fp16, [1, 512, 1, 1500]> inputs_15_cast_fp16 = add(x = inputs_13_cast_fp16, y = var_719_cast_fp16)[name = tensor<string, []>("inputs_15_cast_fp16")];
            tensor<int32, [1]> input_37_axes_0 = const()[name = tensor<string, []>("input_37_axes_0"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [512]> input_37_gamma_0_to_fp16 = const()[name = tensor<string, []>("input_37_gamma_0_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(24374016)))];
            tensor<fp16, [512]> input_37_beta_0_to_fp16 = const()[name = tensor<string, []>("input_37_beta_0_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(24375104)))];
            tensor<fp16, []> var_729_to_fp16 = const()[name = tensor<string, []>("op_729_to_fp16"), val = tensor<fp16, []>(0x1.5p-17)];
            tensor<fp16, [1, 512, 1, 1500]> input_37_cast_fp16 = layer_norm(axes = input_37_axes_0, beta = input_37_beta_0_to_fp16, epsilon = var_729_to_fp16, gamma = input_37_gamma_0_to_fp16, x = inputs_15_cast_fp16)[name = tensor<string, []>("input_37_cast_fp16")];
            tensor<string, []> input_39_pad_type_0 = const()[name = tensor<string, []>("input_39_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_39_strides_0 = const()[name = tensor<string, []>("input_39_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> input_39_pad_0 = const()[name = tensor<string, []>("input_39_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_39_dilations_0 = const()[name = tensor<string, []>("input_39_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_39_groups_0 = const()[name = tensor<string, []>("input_39_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [2048, 512, 1, 1]> blocks_3_mlp_0_weight_to_fp16 = const()[name = tensor<string, []>("blocks_3_mlp_0_weight_to_fp16"), val = tensor<fp16, [2048, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(24376192)))];
            tensor<fp16, [2048]> blocks_3_mlp_0_bias_to_fp16 = const()[name = tensor<string, []>("blocks_3_mlp_0_bias_to_fp16"), val = tensor<fp16, [2048]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(26473408)))];
            tensor<fp16, [1, 2048, 1, 1500]> input_39_cast_fp16 = conv(bias = blocks_3_mlp_0_bias_to_fp16, dilations = input_39_dilations_0, groups = input_39_groups_0, pad = input_39_pad_0, pad_type = input_39_pad_type_0, strides = input_39_strides_0, weight = blocks_3_mlp_0_weight_to_fp16, x = input_37_cast_fp16)[name = tensor<string, []>("input_39_cast_fp16")];
            tensor<string, []> input_41_mode_0 = const()[name = tensor<string, []>("input_41_mode_0"), val = tensor<string, []>("EXACT")];
            tensor<fp16, [1, 2048, 1, 1500]> input_41_cast_fp16 = gelu(mode = input_41_mode_0, x = input_39_cast_fp16)[name = tensor<string, []>("input_41_cast_fp16")];
            tensor<string, []> var_755_pad_type_0 = const()[name = tensor<string, []>("op_755_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> var_755_strides_0 = const()[name = tensor<string, []>("op_755_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> var_755_pad_0 = const()[name = tensor<string, []>("op_755_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> var_755_dilations_0 = const()[name = tensor<string, []>("op_755_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> var_755_groups_0 = const()[name = tensor<string, []>("op_755_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [512, 2048, 1, 1]> blocks_3_mlp_2_weight_to_fp16 = const()[name = tensor<string, []>("blocks_3_mlp_2_weight_to_fp16"), val = tensor<fp16, [512, 2048, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(26477568)))];
            tensor<fp16, [512]> blocks_3_mlp_2_bias_to_fp16 = const()[name = tensor<string, []>("blocks_3_mlp_2_bias_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(28574784)))];
            tensor<fp16, [1, 512, 1, 1500]> var_755_cast_fp16 = conv(bias = blocks_3_mlp_2_bias_to_fp16, dilations = var_755_dilations_0, groups = var_755_groups_0, pad = var_755_pad_0, pad_type = var_755_pad_type_0, strides = var_755_strides_0, weight = blocks_3_mlp_2_weight_to_fp16, x = input_41_cast_fp16)[name = tensor<string, []>("op_755_cast_fp16")];
            tensor<fp16, [1, 512, 1, 1500]> inputs_17_cast_fp16 = add(x = inputs_15_cast_fp16, y = var_755_cast_fp16)[name = tensor<string, []>("inputs_17_cast_fp16")];
            tensor<int32, []> var_764 = const()[name = tensor<string, []>("op_764"), val = tensor<int32, []>(1)];
            tensor<int32, [1]> input_43_axes_0 = const()[name = tensor<string, []>("input_43_axes_0"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [512]> input_43_gamma_0_to_fp16 = const()[name = tensor<string, []>("input_43_gamma_0_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(28575872)))];
            tensor<fp16, [512]> input_43_beta_0_to_fp16 = const()[name = tensor<string, []>("input_43_beta_0_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(28576960)))];
            tensor<fp16, []> var_780_to_fp16 = const()[name = tensor<string, []>("op_780_to_fp16"), val = tensor<fp16, []>(0x1.5p-17)];
            tensor<fp16, [1, 512, 1, 1500]> input_43_cast_fp16 = layer_norm(axes = input_43_axes_0, beta = input_43_beta_0_to_fp16, epsilon = var_780_to_fp16, gamma = input_43_gamma_0_to_fp16, x = inputs_17_cast_fp16)[name = tensor<string, []>("input_43_cast_fp16")];
            tensor<string, []> q_9_pad_type_0 = const()[name = tensor<string, []>("q_9_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> q_9_strides_0 = const()[name = tensor<string, []>("q_9_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> q_9_pad_0 = const()[name = tensor<string, []>("q_9_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> q_9_dilations_0 = const()[name = tensor<string, []>("q_9_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> q_9_groups_0 = const()[name = tensor<string, []>("q_9_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [512, 512, 1, 1]> var_815_weight_0_to_fp16 = const()[name = tensor<string, []>("op_815_weight_0_to_fp16"), val = tensor<fp16, [512, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(28578048)))];
            tensor<fp16, [512]> var_815_bias_0_to_fp16 = const()[name = tensor<string, []>("op_815_bias_0_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(29102400)))];
            tensor<fp16, [1, 512, 1, 1500]> var_815_cast_fp16 = conv(bias = var_815_bias_0_to_fp16, dilations = q_9_dilations_0, groups = q_9_groups_0, pad = q_9_pad_0, pad_type = q_9_pad_type_0, strides = q_9_strides_0, weight = var_815_weight_0_to_fp16, x = input_43_cast_fp16)[name = tensor<string, []>("op_815_cast_fp16")];
            tensor<string, []> k_9_pad_type_0 = const()[name = tensor<string, []>("k_9_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> k_9_strides_0 = const()[name = tensor<string, []>("k_9_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> k_9_pad_0 = const()[name = tensor<string, []>("k_9_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> k_9_dilations_0 = const()[name = tensor<string, []>("k_9_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> k_9_groups_0 = const()[name = tensor<string, []>("k_9_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [512, 512, 1, 1]> blocks_4_attn_key_weight_to_fp16 = const()[name = tensor<string, []>("blocks_4_attn_key_weight_to_fp16"), val = tensor<fp16, [512, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(29103488)))];
            tensor<fp16, [1, 512, 1, 1500]> k_9_cast_fp16 = conv(dilations = k_9_dilations_0, groups = k_9_groups_0, pad = k_9_pad_0, pad_type = k_9_pad_type_0, strides = k_9_strides_0, weight = blocks_4_attn_key_weight_to_fp16, x = input_43_cast_fp16)[name = tensor<string, []>("k_9_cast_fp16")];
            tensor<string, []> var_813_pad_type_0 = const()[name = tensor<string, []>("op_813_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> var_813_strides_0 = const()[name = tensor<string, []>("op_813_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> var_813_pad_0 = const()[name = tensor<string, []>("op_813_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> var_813_dilations_0 = const()[name = tensor<string, []>("op_813_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> var_813_groups_0 = const()[name = tensor<string, []>("op_813_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [512, 512, 1, 1]> blocks_4_attn_value_weight_to_fp16 = const()[name = tensor<string, []>("blocks_4_attn_value_weight_to_fp16"), val = tensor<fp16, [512, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(29627840)))];
            tensor<fp16, [512]> blocks_4_attn_value_bias_to_fp16 = const()[name = tensor<string, []>("blocks_4_attn_value_bias_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(30152192)))];
            tensor<fp16, [1, 512, 1, 1500]> var_813_cast_fp16 = conv(bias = blocks_4_attn_value_bias_to_fp16, dilations = var_813_dilations_0, groups = var_813_groups_0, pad = var_813_pad_0, pad_type = var_813_pad_type_0, strides = var_813_strides_0, weight = blocks_4_attn_value_weight_to_fp16, x = input_43_cast_fp16)[name = tensor<string, []>("op_813_cast_fp16")];
            tensor<int32, [8]> tile_12 = const()[name = tensor<string, []>("tile_12"), val = tensor<int32, [8]>([64, 64, 64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_816_axis_0 = const()[name = tensor<string, []>("op_816_axis_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 64, 1, 1500]> var_816_cast_fp16_0, tensor<fp16, [1, 64, 1, 1500]> var_816_cast_fp16_1, tensor<fp16, [1, 64, 1, 1500]> var_816_cast_fp16_2, tensor<fp16, [1, 64, 1, 1500]> var_816_cast_fp16_3, tensor<fp16, [1, 64, 1, 1500]> var_816_cast_fp16_4, tensor<fp16, [1, 64, 1, 1500]> var_816_cast_fp16_5, tensor<fp16, [1, 64, 1, 1500]> var_816_cast_fp16_6, tensor<fp16, [1, 64, 1, 1500]> var_816_cast_fp16_7 = split(axis = var_816_axis_0, split_sizes = tile_12, x = var_815_cast_fp16)[name = tensor<string, []>("op_816_cast_fp16")];
            tensor<int32, [4]> var_825_perm_0 = const()[name = tensor<string, []>("op_825_perm_0"), val = tensor<int32, [4]>([0, 3, 2, 1])];
            tensor<int32, [8]> tile_13 = const()[name = tensor<string, []>("tile_13"), val = tensor<int32, [8]>([64, 64, 64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_826_axis_0 = const()[name = tensor<string, []>("op_826_axis_0"), val = tensor<int32, []>(3)];
            tensor<fp16, [1, 1500, 1, 512]> var_825_cast_fp16 = transpose(perm = var_825_perm_0, x = k_9_cast_fp16)[name = tensor<string, []>("transpose_2")];
            tensor<fp16, [1, 1500, 1, 64]> var_826_cast_fp16_0, tensor<fp16, [1, 1500, 1, 64]> var_826_cast_fp16_1, tensor<fp16, [1, 1500, 1, 64]> var_826_cast_fp16_2, tensor<fp16, [1, 1500, 1, 64]> var_826_cast_fp16_3, tensor<fp16, [1, 1500, 1, 64]> var_826_cast_fp16_4, tensor<fp16, [1, 1500, 1, 64]> var_826_cast_fp16_5, tensor<fp16, [1, 1500, 1, 64]> var_826_cast_fp16_6, tensor<fp16, [1, 1500, 1, 64]> var_826_cast_fp16_7 = split(axis = var_826_axis_0, split_sizes = tile_13, x = var_825_cast_fp16)[name = tensor<string, []>("op_826_cast_fp16")];
            tensor<int32, [8]> tile_14 = const()[name = tensor<string, []>("tile_14"), val = tensor<int32, [8]>([64, 64, 64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_835_axis_0 = const()[name = tensor<string, []>("op_835_axis_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 64, 1, 1500]> var_835_cast_fp16_0, tensor<fp16, [1, 64, 1, 1500]> var_835_cast_fp16_1, tensor<fp16, [1, 64, 1, 1500]> var_835_cast_fp16_2, tensor<fp16, [1, 64, 1, 1500]> var_835_cast_fp16_3, tensor<fp16, [1, 64, 1, 1500]> var_835_cast_fp16_4, tensor<fp16, [1, 64, 1, 1500]> var_835_cast_fp16_5, tensor<fp16, [1, 64, 1, 1500]> var_835_cast_fp16_6, tensor<fp16, [1, 64, 1, 1500]> var_835_cast_fp16_7 = split(axis = var_835_axis_0, split_sizes = tile_14, x = var_813_cast_fp16)[name = tensor<string, []>("op_835_cast_fp16")];
            tensor<string, []> aw_65_equation_0 = const()[name = tensor<string, []>("aw_65_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_65_cast_fp16 = einsum(equation = aw_65_equation_0, values = (var_826_cast_fp16_0, var_816_cast_fp16_0))[name = tensor<string, []>("aw_65_cast_fp16")];
            tensor<string, []> aw_67_equation_0 = const()[name = tensor<string, []>("aw_67_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_67_cast_fp16 = einsum(equation = aw_67_equation_0, values = (var_826_cast_fp16_1, var_816_cast_fp16_1))[name = tensor<string, []>("aw_67_cast_fp16")];
            tensor<string, []> aw_69_equation_0 = const()[name = tensor<string, []>("aw_69_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_69_cast_fp16 = einsum(equation = aw_69_equation_0, values = (var_826_cast_fp16_2, var_816_cast_fp16_2))[name = tensor<string, []>("aw_69_cast_fp16")];
            tensor<string, []> aw_71_equation_0 = const()[name = tensor<string, []>("aw_71_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_71_cast_fp16 = einsum(equation = aw_71_equation_0, values = (var_826_cast_fp16_3, var_816_cast_fp16_3))[name = tensor<string, []>("aw_71_cast_fp16")];
            tensor<string, []> aw_73_equation_0 = const()[name = tensor<string, []>("aw_73_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_73_cast_fp16 = einsum(equation = aw_73_equation_0, values = (var_826_cast_fp16_4, var_816_cast_fp16_4))[name = tensor<string, []>("aw_73_cast_fp16")];
            tensor<string, []> aw_75_equation_0 = const()[name = tensor<string, []>("aw_75_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_75_cast_fp16 = einsum(equation = aw_75_equation_0, values = (var_826_cast_fp16_5, var_816_cast_fp16_5))[name = tensor<string, []>("aw_75_cast_fp16")];
            tensor<string, []> aw_77_equation_0 = const()[name = tensor<string, []>("aw_77_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_77_cast_fp16 = einsum(equation = aw_77_equation_0, values = (var_826_cast_fp16_6, var_816_cast_fp16_6))[name = tensor<string, []>("aw_77_cast_fp16")];
            tensor<string, []> aw_79_equation_0 = const()[name = tensor<string, []>("aw_79_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_79_cast_fp16 = einsum(equation = aw_79_equation_0, values = (var_826_cast_fp16_7, var_816_cast_fp16_7))[name = tensor<string, []>("aw_79_cast_fp16")];
            tensor<fp16, [1, 1500, 1, 1500]> var_860_cast_fp16 = softmax(axis = var_764, x = aw_65_cast_fp16)[name = tensor<string, []>("op_860_cast_fp16")];
            tensor<fp16, [1, 1500, 1, 1500]> var_861_cast_fp16 = softmax(axis = var_764, x = aw_67_cast_fp16)[name = tensor<string, []>("op_861_cast_fp16")];
            tensor<fp16, [1, 1500, 1, 1500]> var_862_cast_fp16 = softmax(axis = var_764, x = aw_69_cast_fp16)[name = tensor<string, []>("op_862_cast_fp16")];
            tensor<fp16, [1, 1500, 1, 1500]> var_863_cast_fp16 = softmax(axis = var_764, x = aw_71_cast_fp16)[name = tensor<string, []>("op_863_cast_fp16")];
            tensor<fp16, [1, 1500, 1, 1500]> var_864_cast_fp16 = softmax(axis = var_764, x = aw_73_cast_fp16)[name = tensor<string, []>("op_864_cast_fp16")];
            tensor<fp16, [1, 1500, 1, 1500]> var_865_cast_fp16 = softmax(axis = var_764, x = aw_75_cast_fp16)[name = tensor<string, []>("op_865_cast_fp16")];
            tensor<fp16, [1, 1500, 1, 1500]> var_866_cast_fp16 = softmax(axis = var_764, x = aw_77_cast_fp16)[name = tensor<string, []>("op_866_cast_fp16")];
            tensor<fp16, [1, 1500, 1, 1500]> var_867_cast_fp16 = softmax(axis = var_764, x = aw_79_cast_fp16)[name = tensor<string, []>("op_867_cast_fp16")];
            tensor<string, []> var_869_equation_0 = const()[name = tensor<string, []>("op_869_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_869_cast_fp16 = einsum(equation = var_869_equation_0, values = (var_835_cast_fp16_0, var_860_cast_fp16))[name = tensor<string, []>("op_869_cast_fp16")];
            tensor<string, []> var_871_equation_0 = const()[name = tensor<string, []>("op_871_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_871_cast_fp16 = einsum(equation = var_871_equation_0, values = (var_835_cast_fp16_1, var_861_cast_fp16))[name = tensor<string, []>("op_871_cast_fp16")];
            tensor<string, []> var_873_equation_0 = const()[name = tensor<string, []>("op_873_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_873_cast_fp16 = einsum(equation = var_873_equation_0, values = (var_835_cast_fp16_2, var_862_cast_fp16))[name = tensor<string, []>("op_873_cast_fp16")];
            tensor<string, []> var_875_equation_0 = const()[name = tensor<string, []>("op_875_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_875_cast_fp16 = einsum(equation = var_875_equation_0, values = (var_835_cast_fp16_3, var_863_cast_fp16))[name = tensor<string, []>("op_875_cast_fp16")];
            tensor<string, []> var_877_equation_0 = const()[name = tensor<string, []>("op_877_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_877_cast_fp16 = einsum(equation = var_877_equation_0, values = (var_835_cast_fp16_4, var_864_cast_fp16))[name = tensor<string, []>("op_877_cast_fp16")];
            tensor<string, []> var_879_equation_0 = const()[name = tensor<string, []>("op_879_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_879_cast_fp16 = einsum(equation = var_879_equation_0, values = (var_835_cast_fp16_5, var_865_cast_fp16))[name = tensor<string, []>("op_879_cast_fp16")];
            tensor<string, []> var_881_equation_0 = const()[name = tensor<string, []>("op_881_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_881_cast_fp16 = einsum(equation = var_881_equation_0, values = (var_835_cast_fp16_6, var_866_cast_fp16))[name = tensor<string, []>("op_881_cast_fp16")];
            tensor<string, []> var_883_equation_0 = const()[name = tensor<string, []>("op_883_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_883_cast_fp16 = einsum(equation = var_883_equation_0, values = (var_835_cast_fp16_7, var_867_cast_fp16))[name = tensor<string, []>("op_883_cast_fp16")];
            tensor<bool, []> input_45_interleave_0 = const()[name = tensor<string, []>("input_45_interleave_0"), val = tensor<bool, []>(false)];
            tensor<fp16, [1, 512, 1, 1500]> input_45_cast_fp16 = concat(axis = var_764, interleave = input_45_interleave_0, values = (var_869_cast_fp16, var_871_cast_fp16, var_873_cast_fp16, var_875_cast_fp16, var_877_cast_fp16, var_879_cast_fp16, var_881_cast_fp16, var_883_cast_fp16))[name = tensor<string, []>("input_45_cast_fp16")];
            tensor<string, []> var_892_pad_type_0 = const()[name = tensor<string, []>("op_892_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> var_892_strides_0 = const()[name = tensor<string, []>("op_892_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> var_892_pad_0 = const()[name = tensor<string, []>("op_892_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> var_892_dilations_0 = const()[name = tensor<string, []>("op_892_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> var_892_groups_0 = const()[name = tensor<string, []>("op_892_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [512, 512, 1, 1]> blocks_4_attn_out_weight_to_fp16 = const()[name = tensor<string, []>("blocks_4_attn_out_weight_to_fp16"), val = tensor<fp16, [512, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(30153280)))];
            tensor<fp16, [512]> blocks_4_attn_out_bias_to_fp16 = const()[name = tensor<string, []>("blocks_4_attn_out_bias_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(30677632)))];
            tensor<fp16, [1, 512, 1, 1500]> var_892_cast_fp16 = conv(bias = blocks_4_attn_out_bias_to_fp16, dilations = var_892_dilations_0, groups = var_892_groups_0, pad = var_892_pad_0, pad_type = var_892_pad_type_0, strides = var_892_strides_0, weight = blocks_4_attn_out_weight_to_fp16, x = input_45_cast_fp16)[name = tensor<string, []>("op_892_cast_fp16")];
            tensor<fp16, [1, 512, 1, 1500]> inputs_19_cast_fp16 = add(x = inputs_17_cast_fp16, y = var_892_cast_fp16)[name = tensor<string, []>("inputs_19_cast_fp16")];
            tensor<int32, [1]> input_47_axes_0 = const()[name = tensor<string, []>("input_47_axes_0"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [512]> input_47_gamma_0_to_fp16 = const()[name = tensor<string, []>("input_47_gamma_0_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(30678720)))];
            tensor<fp16, [512]> input_47_beta_0_to_fp16 = const()[name = tensor<string, []>("input_47_beta_0_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(30679808)))];
            tensor<fp16, []> var_902_to_fp16 = const()[name = tensor<string, []>("op_902_to_fp16"), val = tensor<fp16, []>(0x1.5p-17)];
            tensor<fp16, [1, 512, 1, 1500]> input_47_cast_fp16 = layer_norm(axes = input_47_axes_0, beta = input_47_beta_0_to_fp16, epsilon = var_902_to_fp16, gamma = input_47_gamma_0_to_fp16, x = inputs_19_cast_fp16)[name = tensor<string, []>("input_47_cast_fp16")];
            tensor<string, []> input_49_pad_type_0 = const()[name = tensor<string, []>("input_49_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_49_strides_0 = const()[name = tensor<string, []>("input_49_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> input_49_pad_0 = const()[name = tensor<string, []>("input_49_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_49_dilations_0 = const()[name = tensor<string, []>("input_49_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_49_groups_0 = const()[name = tensor<string, []>("input_49_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [2048, 512, 1, 1]> blocks_4_mlp_0_weight_to_fp16 = const()[name = tensor<string, []>("blocks_4_mlp_0_weight_to_fp16"), val = tensor<fp16, [2048, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(30680896)))];
            tensor<fp16, [2048]> blocks_4_mlp_0_bias_to_fp16 = const()[name = tensor<string, []>("blocks_4_mlp_0_bias_to_fp16"), val = tensor<fp16, [2048]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(32778112)))];
            tensor<fp16, [1, 2048, 1, 1500]> input_49_cast_fp16 = conv(bias = blocks_4_mlp_0_bias_to_fp16, dilations = input_49_dilations_0, groups = input_49_groups_0, pad = input_49_pad_0, pad_type = input_49_pad_type_0, strides = input_49_strides_0, weight = blocks_4_mlp_0_weight_to_fp16, x = input_47_cast_fp16)[name = tensor<string, []>("input_49_cast_fp16")];
            tensor<string, []> input_51_mode_0 = const()[name = tensor<string, []>("input_51_mode_0"), val = tensor<string, []>("EXACT")];
            tensor<fp16, [1, 2048, 1, 1500]> input_51_cast_fp16 = gelu(mode = input_51_mode_0, x = input_49_cast_fp16)[name = tensor<string, []>("input_51_cast_fp16")];
            tensor<string, []> var_928_pad_type_0 = const()[name = tensor<string, []>("op_928_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> var_928_strides_0 = const()[name = tensor<string, []>("op_928_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> var_928_pad_0 = const()[name = tensor<string, []>("op_928_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> var_928_dilations_0 = const()[name = tensor<string, []>("op_928_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> var_928_groups_0 = const()[name = tensor<string, []>("op_928_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [512, 2048, 1, 1]> blocks_4_mlp_2_weight_to_fp16 = const()[name = tensor<string, []>("blocks_4_mlp_2_weight_to_fp16"), val = tensor<fp16, [512, 2048, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(32782272)))];
            tensor<fp16, [512]> blocks_4_mlp_2_bias_to_fp16 = const()[name = tensor<string, []>("blocks_4_mlp_2_bias_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(34879488)))];
            tensor<fp16, [1, 512, 1, 1500]> var_928_cast_fp16 = conv(bias = blocks_4_mlp_2_bias_to_fp16, dilations = var_928_dilations_0, groups = var_928_groups_0, pad = var_928_pad_0, pad_type = var_928_pad_type_0, strides = var_928_strides_0, weight = blocks_4_mlp_2_weight_to_fp16, x = input_51_cast_fp16)[name = tensor<string, []>("op_928_cast_fp16")];
            tensor<fp16, [1, 512, 1, 1500]> inputs_21_cast_fp16 = add(x = inputs_19_cast_fp16, y = var_928_cast_fp16)[name = tensor<string, []>("inputs_21_cast_fp16")];
            tensor<int32, []> var_937 = const()[name = tensor<string, []>("op_937"), val = tensor<int32, []>(1)];
            tensor<int32, [1]> input_53_axes_0 = const()[name = tensor<string, []>("input_53_axes_0"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [512]> input_53_gamma_0_to_fp16 = const()[name = tensor<string, []>("input_53_gamma_0_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(34880576)))];
            tensor<fp16, [512]> input_53_beta_0_to_fp16 = const()[name = tensor<string, []>("input_53_beta_0_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(34881664)))];
            tensor<fp16, []> var_953_to_fp16 = const()[name = tensor<string, []>("op_953_to_fp16"), val = tensor<fp16, []>(0x1.5p-17)];
            tensor<fp16, [1, 512, 1, 1500]> input_53_cast_fp16 = layer_norm(axes = input_53_axes_0, beta = input_53_beta_0_to_fp16, epsilon = var_953_to_fp16, gamma = input_53_gamma_0_to_fp16, x = inputs_21_cast_fp16)[name = tensor<string, []>("input_53_cast_fp16")];
            tensor<string, []> q_pad_type_0 = const()[name = tensor<string, []>("q_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> q_strides_0 = const()[name = tensor<string, []>("q_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> q_pad_0 = const()[name = tensor<string, []>("q_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> q_dilations_0 = const()[name = tensor<string, []>("q_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> q_groups_0 = const()[name = tensor<string, []>("q_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [512, 512, 1, 1]> var_988_weight_0_to_fp16 = const()[name = tensor<string, []>("op_988_weight_0_to_fp16"), val = tensor<fp16, [512, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(34882752)))];
            tensor<fp16, [512]> var_988_bias_0_to_fp16 = const()[name = tensor<string, []>("op_988_bias_0_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(35407104)))];
            tensor<fp16, [1, 512, 1, 1500]> var_988_cast_fp16 = conv(bias = var_988_bias_0_to_fp16, dilations = q_dilations_0, groups = q_groups_0, pad = q_pad_0, pad_type = q_pad_type_0, strides = q_strides_0, weight = var_988_weight_0_to_fp16, x = input_53_cast_fp16)[name = tensor<string, []>("op_988_cast_fp16")];
            tensor<string, []> k_pad_type_0 = const()[name = tensor<string, []>("k_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> k_strides_0 = const()[name = tensor<string, []>("k_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> k_pad_0 = const()[name = tensor<string, []>("k_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> k_dilations_0 = const()[name = tensor<string, []>("k_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> k_groups_0 = const()[name = tensor<string, []>("k_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [512, 512, 1, 1]> blocks_5_attn_key_weight_to_fp16 = const()[name = tensor<string, []>("blocks_5_attn_key_weight_to_fp16"), val = tensor<fp16, [512, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(35408192)))];
            tensor<fp16, [1, 512, 1, 1500]> k_cast_fp16 = conv(dilations = k_dilations_0, groups = k_groups_0, pad = k_pad_0, pad_type = k_pad_type_0, strides = k_strides_0, weight = blocks_5_attn_key_weight_to_fp16, x = input_53_cast_fp16)[name = tensor<string, []>("k_cast_fp16")];
            tensor<string, []> var_986_pad_type_0 = const()[name = tensor<string, []>("op_986_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> var_986_strides_0 = const()[name = tensor<string, []>("op_986_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> var_986_pad_0 = const()[name = tensor<string, []>("op_986_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> var_986_dilations_0 = const()[name = tensor<string, []>("op_986_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> var_986_groups_0 = const()[name = tensor<string, []>("op_986_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [512, 512, 1, 1]> blocks_5_attn_value_weight_to_fp16 = const()[name = tensor<string, []>("blocks_5_attn_value_weight_to_fp16"), val = tensor<fp16, [512, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(35932544)))];
            tensor<fp16, [512]> blocks_5_attn_value_bias_to_fp16 = const()[name = tensor<string, []>("blocks_5_attn_value_bias_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(36456896)))];
            tensor<fp16, [1, 512, 1, 1500]> var_986_cast_fp16 = conv(bias = blocks_5_attn_value_bias_to_fp16, dilations = var_986_dilations_0, groups = var_986_groups_0, pad = var_986_pad_0, pad_type = var_986_pad_type_0, strides = var_986_strides_0, weight = blocks_5_attn_value_weight_to_fp16, x = input_53_cast_fp16)[name = tensor<string, []>("op_986_cast_fp16")];
            tensor<int32, [8]> tile_15 = const()[name = tensor<string, []>("tile_15"), val = tensor<int32, [8]>([64, 64, 64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_989_axis_0 = const()[name = tensor<string, []>("op_989_axis_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 64, 1, 1500]> var_989_cast_fp16_0, tensor<fp16, [1, 64, 1, 1500]> var_989_cast_fp16_1, tensor<fp16, [1, 64, 1, 1500]> var_989_cast_fp16_2, tensor<fp16, [1, 64, 1, 1500]> var_989_cast_fp16_3, tensor<fp16, [1, 64, 1, 1500]> var_989_cast_fp16_4, tensor<fp16, [1, 64, 1, 1500]> var_989_cast_fp16_5, tensor<fp16, [1, 64, 1, 1500]> var_989_cast_fp16_6, tensor<fp16, [1, 64, 1, 1500]> var_989_cast_fp16_7 = split(axis = var_989_axis_0, split_sizes = tile_15, x = var_988_cast_fp16)[name = tensor<string, []>("op_989_cast_fp16")];
            tensor<int32, [4]> var_998_perm_0 = const()[name = tensor<string, []>("op_998_perm_0"), val = tensor<int32, [4]>([0, 3, 2, 1])];
            tensor<int32, [8]> tile_16 = const()[name = tensor<string, []>("tile_16"), val = tensor<int32, [8]>([64, 64, 64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_999_axis_0 = const()[name = tensor<string, []>("op_999_axis_0"), val = tensor<int32, []>(3)];
            tensor<fp16, [1, 1500, 1, 512]> var_998_cast_fp16 = transpose(perm = var_998_perm_0, x = k_cast_fp16)[name = tensor<string, []>("transpose_1")];
            tensor<fp16, [1, 1500, 1, 64]> var_999_cast_fp16_0, tensor<fp16, [1, 1500, 1, 64]> var_999_cast_fp16_1, tensor<fp16, [1, 1500, 1, 64]> var_999_cast_fp16_2, tensor<fp16, [1, 1500, 1, 64]> var_999_cast_fp16_3, tensor<fp16, [1, 1500, 1, 64]> var_999_cast_fp16_4, tensor<fp16, [1, 1500, 1, 64]> var_999_cast_fp16_5, tensor<fp16, [1, 1500, 1, 64]> var_999_cast_fp16_6, tensor<fp16, [1, 1500, 1, 64]> var_999_cast_fp16_7 = split(axis = var_999_axis_0, split_sizes = tile_16, x = var_998_cast_fp16)[name = tensor<string, []>("op_999_cast_fp16")];
            tensor<int32, [8]> tile_17 = const()[name = tensor<string, []>("tile_17"), val = tensor<int32, [8]>([64, 64, 64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_1008_axis_0 = const()[name = tensor<string, []>("op_1008_axis_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 64, 1, 1500]> var_1008_cast_fp16_0, tensor<fp16, [1, 64, 1, 1500]> var_1008_cast_fp16_1, tensor<fp16, [1, 64, 1, 1500]> var_1008_cast_fp16_2, tensor<fp16, [1, 64, 1, 1500]> var_1008_cast_fp16_3, tensor<fp16, [1, 64, 1, 1500]> var_1008_cast_fp16_4, tensor<fp16, [1, 64, 1, 1500]> var_1008_cast_fp16_5, tensor<fp16, [1, 64, 1, 1500]> var_1008_cast_fp16_6, tensor<fp16, [1, 64, 1, 1500]> var_1008_cast_fp16_7 = split(axis = var_1008_axis_0, split_sizes = tile_17, x = var_986_cast_fp16)[name = tensor<string, []>("op_1008_cast_fp16")];
            tensor<string, []> aw_81_equation_0 = const()[name = tensor<string, []>("aw_81_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_81_cast_fp16 = einsum(equation = aw_81_equation_0, values = (var_999_cast_fp16_0, var_989_cast_fp16_0))[name = tensor<string, []>("aw_81_cast_fp16")];
            tensor<string, []> aw_83_equation_0 = const()[name = tensor<string, []>("aw_83_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_83_cast_fp16 = einsum(equation = aw_83_equation_0, values = (var_999_cast_fp16_1, var_989_cast_fp16_1))[name = tensor<string, []>("aw_83_cast_fp16")];
            tensor<string, []> aw_85_equation_0 = const()[name = tensor<string, []>("aw_85_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_85_cast_fp16 = einsum(equation = aw_85_equation_0, values = (var_999_cast_fp16_2, var_989_cast_fp16_2))[name = tensor<string, []>("aw_85_cast_fp16")];
            tensor<string, []> aw_87_equation_0 = const()[name = tensor<string, []>("aw_87_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_87_cast_fp16 = einsum(equation = aw_87_equation_0, values = (var_999_cast_fp16_3, var_989_cast_fp16_3))[name = tensor<string, []>("aw_87_cast_fp16")];
            tensor<string, []> aw_89_equation_0 = const()[name = tensor<string, []>("aw_89_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_89_cast_fp16 = einsum(equation = aw_89_equation_0, values = (var_999_cast_fp16_4, var_989_cast_fp16_4))[name = tensor<string, []>("aw_89_cast_fp16")];
            tensor<string, []> aw_91_equation_0 = const()[name = tensor<string, []>("aw_91_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_91_cast_fp16 = einsum(equation = aw_91_equation_0, values = (var_999_cast_fp16_5, var_989_cast_fp16_5))[name = tensor<string, []>("aw_91_cast_fp16")];
            tensor<string, []> aw_93_equation_0 = const()[name = tensor<string, []>("aw_93_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_93_cast_fp16 = einsum(equation = aw_93_equation_0, values = (var_999_cast_fp16_6, var_989_cast_fp16_6))[name = tensor<string, []>("aw_93_cast_fp16")];
            tensor<string, []> aw_equation_0 = const()[name = tensor<string, []>("aw_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_cast_fp16 = einsum(equation = aw_equation_0, values = (var_999_cast_fp16_7, var_989_cast_fp16_7))[name = tensor<string, []>("aw_cast_fp16")];
            tensor<fp16, [1, 1500, 1, 1500]> var_1033_cast_fp16 = softmax(axis = var_937, x = aw_81_cast_fp16)[name = tensor<string, []>("op_1033_cast_fp16")];
            tensor<fp16, [1, 1500, 1, 1500]> var_1034_cast_fp16 = softmax(axis = var_937, x = aw_83_cast_fp16)[name = tensor<string, []>("op_1034_cast_fp16")];
            tensor<fp16, [1, 1500, 1, 1500]> var_1035_cast_fp16 = softmax(axis = var_937, x = aw_85_cast_fp16)[name = tensor<string, []>("op_1035_cast_fp16")];
            tensor<fp16, [1, 1500, 1, 1500]> var_1036_cast_fp16 = softmax(axis = var_937, x = aw_87_cast_fp16)[name = tensor<string, []>("op_1036_cast_fp16")];
            tensor<fp16, [1, 1500, 1, 1500]> var_1037_cast_fp16 = softmax(axis = var_937, x = aw_89_cast_fp16)[name = tensor<string, []>("op_1037_cast_fp16")];
            tensor<fp16, [1, 1500, 1, 1500]> var_1038_cast_fp16 = softmax(axis = var_937, x = aw_91_cast_fp16)[name = tensor<string, []>("op_1038_cast_fp16")];
            tensor<fp16, [1, 1500, 1, 1500]> var_1039_cast_fp16 = softmax(axis = var_937, x = aw_93_cast_fp16)[name = tensor<string, []>("op_1039_cast_fp16")];
            tensor<fp16, [1, 1500, 1, 1500]> var_1040_cast_fp16 = softmax(axis = var_937, x = aw_cast_fp16)[name = tensor<string, []>("op_1040_cast_fp16")];
            tensor<string, []> var_1042_equation_0 = const()[name = tensor<string, []>("op_1042_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_1042_cast_fp16 = einsum(equation = var_1042_equation_0, values = (var_1008_cast_fp16_0, var_1033_cast_fp16))[name = tensor<string, []>("op_1042_cast_fp16")];
            tensor<string, []> var_1044_equation_0 = const()[name = tensor<string, []>("op_1044_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_1044_cast_fp16 = einsum(equation = var_1044_equation_0, values = (var_1008_cast_fp16_1, var_1034_cast_fp16))[name = tensor<string, []>("op_1044_cast_fp16")];
            tensor<string, []> var_1046_equation_0 = const()[name = tensor<string, []>("op_1046_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_1046_cast_fp16 = einsum(equation = var_1046_equation_0, values = (var_1008_cast_fp16_2, var_1035_cast_fp16))[name = tensor<string, []>("op_1046_cast_fp16")];
            tensor<string, []> var_1048_equation_0 = const()[name = tensor<string, []>("op_1048_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_1048_cast_fp16 = einsum(equation = var_1048_equation_0, values = (var_1008_cast_fp16_3, var_1036_cast_fp16))[name = tensor<string, []>("op_1048_cast_fp16")];
            tensor<string, []> var_1050_equation_0 = const()[name = tensor<string, []>("op_1050_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_1050_cast_fp16 = einsum(equation = var_1050_equation_0, values = (var_1008_cast_fp16_4, var_1037_cast_fp16))[name = tensor<string, []>("op_1050_cast_fp16")];
            tensor<string, []> var_1052_equation_0 = const()[name = tensor<string, []>("op_1052_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_1052_cast_fp16 = einsum(equation = var_1052_equation_0, values = (var_1008_cast_fp16_5, var_1038_cast_fp16))[name = tensor<string, []>("op_1052_cast_fp16")];
            tensor<string, []> var_1054_equation_0 = const()[name = tensor<string, []>("op_1054_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_1054_cast_fp16 = einsum(equation = var_1054_equation_0, values = (var_1008_cast_fp16_6, var_1039_cast_fp16))[name = tensor<string, []>("op_1054_cast_fp16")];
            tensor<string, []> var_1056_equation_0 = const()[name = tensor<string, []>("op_1056_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_1056_cast_fp16 = einsum(equation = var_1056_equation_0, values = (var_1008_cast_fp16_7, var_1040_cast_fp16))[name = tensor<string, []>("op_1056_cast_fp16")];
            tensor<bool, []> input_55_interleave_0 = const()[name = tensor<string, []>("input_55_interleave_0"), val = tensor<bool, []>(false)];
            tensor<fp16, [1, 512, 1, 1500]> input_55_cast_fp16 = concat(axis = var_937, interleave = input_55_interleave_0, values = (var_1042_cast_fp16, var_1044_cast_fp16, var_1046_cast_fp16, var_1048_cast_fp16, var_1050_cast_fp16, var_1052_cast_fp16, var_1054_cast_fp16, var_1056_cast_fp16))[name = tensor<string, []>("input_55_cast_fp16")];
            tensor<string, []> var_1065_pad_type_0 = const()[name = tensor<string, []>("op_1065_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> var_1065_strides_0 = const()[name = tensor<string, []>("op_1065_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> var_1065_pad_0 = const()[name = tensor<string, []>("op_1065_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> var_1065_dilations_0 = const()[name = tensor<string, []>("op_1065_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> var_1065_groups_0 = const()[name = tensor<string, []>("op_1065_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [512, 512, 1, 1]> blocks_5_attn_out_weight_to_fp16 = const()[name = tensor<string, []>("blocks_5_attn_out_weight_to_fp16"), val = tensor<fp16, [512, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(36457984)))];
            tensor<fp16, [512]> blocks_5_attn_out_bias_to_fp16 = const()[name = tensor<string, []>("blocks_5_attn_out_bias_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(36982336)))];
            tensor<fp16, [1, 512, 1, 1500]> var_1065_cast_fp16 = conv(bias = blocks_5_attn_out_bias_to_fp16, dilations = var_1065_dilations_0, groups = var_1065_groups_0, pad = var_1065_pad_0, pad_type = var_1065_pad_type_0, strides = var_1065_strides_0, weight = blocks_5_attn_out_weight_to_fp16, x = input_55_cast_fp16)[name = tensor<string, []>("op_1065_cast_fp16")];
            tensor<fp16, [1, 512, 1, 1500]> inputs_23_cast_fp16 = add(x = inputs_21_cast_fp16, y = var_1065_cast_fp16)[name = tensor<string, []>("inputs_23_cast_fp16")];
            tensor<int32, [1]> input_57_axes_0 = const()[name = tensor<string, []>("input_57_axes_0"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [512]> input_57_gamma_0_to_fp16 = const()[name = tensor<string, []>("input_57_gamma_0_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(36983424)))];
            tensor<fp16, [512]> input_57_beta_0_to_fp16 = const()[name = tensor<string, []>("input_57_beta_0_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(36984512)))];
            tensor<fp16, []> var_1075_to_fp16 = const()[name = tensor<string, []>("op_1075_to_fp16"), val = tensor<fp16, []>(0x1.5p-17)];
            tensor<fp16, [1, 512, 1, 1500]> input_57_cast_fp16 = layer_norm(axes = input_57_axes_0, beta = input_57_beta_0_to_fp16, epsilon = var_1075_to_fp16, gamma = input_57_gamma_0_to_fp16, x = inputs_23_cast_fp16)[name = tensor<string, []>("input_57_cast_fp16")];
            tensor<string, []> input_59_pad_type_0 = const()[name = tensor<string, []>("input_59_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> input_59_strides_0 = const()[name = tensor<string, []>("input_59_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> input_59_pad_0 = const()[name = tensor<string, []>("input_59_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> input_59_dilations_0 = const()[name = tensor<string, []>("input_59_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> input_59_groups_0 = const()[name = tensor<string, []>("input_59_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [2048, 512, 1, 1]> blocks_5_mlp_0_weight_to_fp16 = const()[name = tensor<string, []>("blocks_5_mlp_0_weight_to_fp16"), val = tensor<fp16, [2048, 512, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(36985600)))];
            tensor<fp16, [2048]> blocks_5_mlp_0_bias_to_fp16 = const()[name = tensor<string, []>("blocks_5_mlp_0_bias_to_fp16"), val = tensor<fp16, [2048]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(39082816)))];
            tensor<fp16, [1, 2048, 1, 1500]> input_59_cast_fp16 = conv(bias = blocks_5_mlp_0_bias_to_fp16, dilations = input_59_dilations_0, groups = input_59_groups_0, pad = input_59_pad_0, pad_type = input_59_pad_type_0, strides = input_59_strides_0, weight = blocks_5_mlp_0_weight_to_fp16, x = input_57_cast_fp16)[name = tensor<string, []>("input_59_cast_fp16")];
            tensor<string, []> input_mode_0 = const()[name = tensor<string, []>("input_mode_0"), val = tensor<string, []>("EXACT")];
            tensor<fp16, [1, 2048, 1, 1500]> input_cast_fp16 = gelu(mode = input_mode_0, x = input_59_cast_fp16)[name = tensor<string, []>("input_cast_fp16")];
            tensor<string, []> var_1101_pad_type_0 = const()[name = tensor<string, []>("op_1101_pad_type_0"), val = tensor<string, []>("valid")];
            tensor<int32, [2]> var_1101_strides_0 = const()[name = tensor<string, []>("op_1101_strides_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [4]> var_1101_pad_0 = const()[name = tensor<string, []>("op_1101_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<int32, [2]> var_1101_dilations_0 = const()[name = tensor<string, []>("op_1101_dilations_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, []> var_1101_groups_0 = const()[name = tensor<string, []>("op_1101_groups_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [512, 2048, 1, 1]> blocks_5_mlp_2_weight_to_fp16 = const()[name = tensor<string, []>("blocks_5_mlp_2_weight_to_fp16"), val = tensor<fp16, [512, 2048, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(39086976)))];
            tensor<fp16, [512]> blocks_5_mlp_2_bias_to_fp16 = const()[name = tensor<string, []>("blocks_5_mlp_2_bias_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(41184192)))];
            tensor<fp16, [1, 512, 1, 1500]> var_1101_cast_fp16 = conv(bias = blocks_5_mlp_2_bias_to_fp16, dilations = var_1101_dilations_0, groups = var_1101_groups_0, pad = var_1101_pad_0, pad_type = var_1101_pad_type_0, strides = var_1101_strides_0, weight = blocks_5_mlp_2_weight_to_fp16, x = input_cast_fp16)[name = tensor<string, []>("op_1101_cast_fp16")];
            tensor<fp16, [1, 512, 1, 1500]> inputs_cast_fp16 = add(x = inputs_23_cast_fp16, y = var_1101_cast_fp16)[name = tensor<string, []>("inputs_cast_fp16")];
            tensor<int32, [1]> x_axes_0 = const()[name = tensor<string, []>("x_axes_0"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [512]> x_gamma_0_to_fp16 = const()[name = tensor<string, []>("x_gamma_0_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(41185280)))];
            tensor<fp16, [512]> x_beta_0_to_fp16 = const()[name = tensor<string, []>("x_beta_0_to_fp16"), val = tensor<fp16, [512]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(41186368)))];
            tensor<fp16, []> var_1115_to_fp16 = const()[name = tensor<string, []>("op_1115_to_fp16"), val = tensor<fp16, []>(0x1.5p-17)];
            tensor<fp16, [1, 512, 1, 1500]> x_cast_fp16 = layer_norm(axes = x_axes_0, beta = x_beta_0_to_fp16, epsilon = var_1115_to_fp16, gamma = x_gamma_0_to_fp16, x = inputs_cast_fp16)[name = tensor<string, []>("x_cast_fp16")];
            tensor<int32, [1]> var_1126_axes_0 = const()[name = tensor<string, []>("op_1126_axes_0"), val = tensor<int32, [1]>([2])];
            tensor<fp16, [1, 512, 1500]> var_1126_cast_fp16 = squeeze(axes = var_1126_axes_0, x = x_cast_fp16)[name = tensor<string, []>("op_1126_cast_fp16")];
            tensor<int32, [3]> var_1129_perm_0 = const()[name = tensor<string, []>("op_1129_perm_0"), val = tensor<int32, [3]>([0, 2, 1])];
            tensor<string, []> var_1129_cast_fp16_to_fp32_dtype_0 = const()[name = tensor<string, []>("op_1129_cast_fp16_to_fp32_dtype_0"), val = tensor<string, []>("fp32")];
            tensor<fp16, [1, 1500, 512]> var_1129_cast_fp16 = transpose(perm = var_1129_perm_0, x = var_1126_cast_fp16)[name = tensor<string, []>("transpose_0")];
            tensor<fp32, [1, 1500, 512]> output = cast(dtype = var_1129_cast_fp16_to_fp32_dtype_0, x = var_1129_cast_fp16)[name = tensor<string, []>("cast_27")];
        } -> (output);
}